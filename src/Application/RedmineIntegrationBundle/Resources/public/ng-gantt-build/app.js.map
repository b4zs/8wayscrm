{"version":3,"sources":["angular-gantt-condensed-tooltips-plugin.js","angular-gantt-condensedgroups-plugin.js","app.js","taskGroup.factory.js","controllers/ProjectsController.js","controllers/condensed-gantt.js","controllers/gantt-tree-node-toggle.js","controllers/login.js","controllers/main.js","controllers/project-gantt.js","directives/contextmenu.js","directives/inview.js","services/prepare-issues.js","services/redmine-resources.js","services/user.js"],"names":[],"mappingsjRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/*\nProject: angular-gantt v1.2.10 - Gantt chart component for AngularJS\nAuthors: Marco Schweighauser, Rémi Alvergnat\nLicense: MIT\nHomepage: https://www.angular-gantt.com\nGithub: https://github.com/angular-gantt/angular-gantt.git\n*/\n(function(){\n    'use strict';\n    angular.module('gantt.condensedtooltips', ['gantt', 'gantt.condensedtooltips.templates']).directive('ganttCondensedTooltips', ['$compile', '$document', function($compile, $document) {\n        return {\n            restrict: 'E',\n            require: '^gantt',\n            scope: {\n                enabled: '=?',\n                dateFormat: '=?',\n                content: '=?',\n                delay: '=?'\n            },\n            link: function(scope, element, attrs, ganttCtrl) {\n                var api = ganttCtrl.gantt.api;\n\n                // Load options from global options attribute.\n                if (scope.options && typeof(scope.options.tooltips) === 'object') {\n                    for (var option in scope.options.tooltips) {\n                        scope[option] = scope.options[option];\n                    }\n                }\n\n                if (scope.enabled === undefined) {\n                    scope.enabled = true;\n                }\n                if (scope.dateFormat === undefined) {\n                    scope.dateFormat = 'MMM DD, HH:mm';\n                }\n                if (scope.delay === undefined) {\n                    scope.delay = 10;\n                }\n                /*if (scope.content === undefined) {\n                    scope.content = 'ABC</br>'+\n                                    '<small>'+\n                                    '{{getFromLabel() + \\' - \\' + getToLabel()}}'+\n                                    '</small>';\n                }*/\n\n                scope.api = api;\n\n                api.directives.on.new(scope, function(directiveName, tooltipTargetScope, tooltipTargetElement, tooltipTargetAttributes) {\n                    if (directiveName === 'ganttCondensedTaskGroupItem' || directiveName === 'ganttCondensedTaskGroupItemActiveFlag') {\n                        var tooltipScope = tooltipTargetScope.$new();\n\n                        tooltipScope.$element = angular.element(tooltipTargetElement);\n                        //tooltipScope.taskGroup = tooltipTargetScope.taskGroups[0];\n                        tooltipScope.tooltipText = tooltipTargetAttributes.tooltiptext;\n                        tooltipScope.pluginScope = scope;\n\n                        var ifElement = $document[0].createElement('div');\n                        angular.element(ifElement).attr('data-ng-if', 'pluginScope.enabled');\n\n                        var tooltipElement = $document[0].createElement('gantt-condensed-tooltip');\n                        if (attrs.templateUrl !== undefined) {\n                            angular.element(tooltipElement).attr('data-template-url', attrs.templateUrl);\n                        }\n                        if (attrs.template !== undefined) {\n                            angular.element(tooltipElement).attr('data-template', attrs.template);\n                        }\n\n                        angular.element(ifElement).append(tooltipElement);\n                        tooltipTargetElement.append($compile(ifElement)(tooltipScope));\n                    }\n                });\n            }\n        };\n    }]);\n}());\n\n\n(function() {\n    'use strict';\n    angular.module('gantt.condensedtooltips').directive('ganttCondensedTooltip', ['$log','$timeout', '$compile', '$document', '$templateCache', 'ganttDebounce', 'ganttSmartEvent', '$rootScope', function($log, $timeout, $compile, $document, $templateCache, debounce, smartEvent, $rootScope) {\n        // This tooltip displays more information about a group in condensed view\n\n        return {\n            restrict: 'E',\n            templateUrl: function(tElement, tAttrs) {\n                var templateUrl;\n                if (tAttrs.templateUrl === undefined) {\n                    templateUrl = 'plugins/tooltips/condensed-tooltip.tmpl.html';\n                } else {\n                    templateUrl = tAttrs.templateUrl;\n                }\n                if (tAttrs.template !== undefined) {\n                    $templateCache.put(templateUrl, tAttrs.template);\n                }\n                return templateUrl;\n            },\n            scope: true,\n            replace: true,\n            controller: ['$scope', '$element', 'ganttUtils', function($scope, $element, utils) {\n                //var bodyElement = angular.element($document[0].body);\n                var showTooltipPromise;\n                var visible = false;\n                var mouseEnterX, mouseEnterY;\n\n                /*var mouseMoveHandler = smartEvent($scope, bodyElement, 'mousemove', debounce(function(e) {\n                    if (!visible) {\n                        mouseEnterX = e.clientX;\n                        mouseEnterY = e.clientY;\n                        console.log('visible');\n                        displayTooltip(true, false);\n                    } else {\n                        // TODO: parent rect\n                        // check if mouse goes outside the parent\n                        if(\n                            !$scope.taskRect ||\n                            e.clientX < $scope.taskRect.left ||\n                            e.clientX > $scope.taskRect.right ||\n                            e.clientY > $scope.taskRect.bottom ||\n                            e.clientY < $scope.taskRect.top\n                        ) {\n//                            displayTooltip(false, false);\n                        }\n\n                        //updateTooltip(e.clientX, e.clientY);\n                    }\n                }, 5, false));*/\n/*\n                $scope.$element.bind('mousemove', function(evt) {\n                    mouseEnterX = evt.clientX;\n                    mouseEnterY = evt.clientY;\n                });\n*/              //var $element2 = $element.find('div')[0];\n                //console.log($element2)\n\n                $element.bind('click', function() {\n                    displayTooltip(false, false);\n                });\n                $scope.$element.bind('mouseenter', function(evt) {\n                    evt.stopPropagation();\n                    mouseEnterX = evt.clientX;\n                    mouseEnterY = evt.clientY;\n                    displayTooltip(true, true);\n                });\n\n                $scope.$element.bind('mouseleave', function(evt) {\n                    //console.log('leaving', evt)\n                    displayTooltip(false);\n                });\n\n                $scope.getContent = function() {\n                    return $scope.tooltipText;\n                };\n\n                var displayTooltip = function(newValue, showDelayed) {\n                    if (showTooltipPromise) {\n                        $timeout.cancel(showTooltipPromise);\n                    }\n\n                    var taskTooltips = true; //$scope.task.model.tooltips;\n                    var rowTooltips = true; //$scope.task.row.model.tooltips;\n\n                    if (typeof(taskTooltips) === 'boolean') {\n                        taskTooltips = {enabled: taskTooltips};\n                    }\n\n                    if (typeof(rowTooltips) === 'boolean') {\n                        rowTooltips = {enabled: rowTooltips};\n                    }\n\n                    var enabled = utils.firstProperty([taskTooltips, rowTooltips], 'enabled', $scope.pluginScope.enabled);\n                    if (enabled && !visible && mouseEnterX !== undefined && newValue) {\n                        if (showDelayed) {\n                            showTooltipPromise = $timeout(function() {\n                                showTooltip(mouseEnterX, mouseEnterY);\n                            }, $scope.pluginScope.delay, false);\n                        } else {\n                            showTooltip(mouseEnterX, mouseEnterY);\n                        }\n                    } else if (!newValue) {\n                        hideTooltip();\n                    }\n                };\n\n                var showTooltip = function(x, y) {\n                    visible = true;\n                    //mouseMoveHandler.bind();\n\n                    $scope.displayed = true;\n\n                    $scope.$evalAsync(function() {\n                        var restoreNgHide;\n                        if ($element.hasClass('ng-hide')) {\n                            $element.removeClass('ng-hide');\n                            restoreNgHide = true;\n                        }\n                        $scope.elementHeight = $element[0].offsetHeight;\n                        $scope.elementWidth = $element[0].offsetWidth;\n                        if (restoreNgHide) {\n                            $element.addClass('ng-hide');\n                        }\n                        updateTooltip(x, y);\n                    });\n                };\n\n                var getViewPortDimensions = function() {\n                    var d = $document[0];\n                    return {\n                      width: d.documentElement.clientWidth || d.documentElement.getElementById('body')[0].clientWidth,\n                      height: d.documentElement.clientHeight || d.documentElement.getElementById('body')[0].clientHeight\n                    }\n                };\n\n                var updateTooltip = function(x, y) {\n                    var viewport = getViewPortDimensions();\n                    // Check if info is overlapping with view port\n                    if (x + $scope.elementWidth > viewport.width) {\n                        $element.css('left', (x + 20 - $scope.elementWidth) + 'px');\n                        $scope.isRightAligned = true;\n                    } else {\n                        $element.css('left', (x - 20) + 'px');\n                        $scope.isRightAligned = false;\n                    }\n\n                    if ($scope.elementHeight < y) {\n                        //$element.css('margin-top', (-$scope.elementHeight - 8) + 'px');\n                        $element.css('top', y + (-$scope.elementHeight - 18) + 'px');\n                        $scope.isTopAligned = true;\n                        //console.log('top aligned', $element);\n                    } else {\n                        //$element.css('margin-top', '18px');\n                        $element.css('padding-top', '23px');\n                        $scope.isTopAligned = false;\n                        //console.log('not top aligned', $element);\n                    }\n                };\n\n                var hideTooltip = function() {\n                    visible = false;\n                    //mouseMoveHandler.unbind();\n                    $scope.$evalAsync(function() {\n                        $scope.displayed = false;\n                    });\n                };\n\n                $scope.gantt.api.directives.raise.new('ganttCondensedTooltip', $scope, $element);\n                $scope.$on('$destroy', function() {\n                    $scope.gantt.api.directives.raise.destroy('ganttCondensedTooltip', $scope, $element);\n                });\n            }]\n        };\n    }]);\n}());\n\nangular.module('gantt.condensedtooltips.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('plugins/tooltips/condensed-tooltip.tmpl.html',\n        '<div ng-cloak' +\n        '     ng-show=\"displayed\"\\n' +\n        '     class=\"gantt-condensed-tooltip-container\">' +\n        '<div ' +\n        '     ng-class=\"{\\'gantt-task-infoArrowR\\': isRightAligned, \\'gantt-task-infoArrow\\': !isRightAligned, \\'gantt-task-infoArrowT\\': isTopAligned, \\'gantt-task-infoArrowB\\': !isTopAligned}\"\\n' +\n        '     class=\"gantt-task-info\"\\n' +\n\n        //'     ng-style=\"{top: taskRect.top + \\'px\\', marginTop: -elementHeight - 8 + \\'px\\'}\">\\n' +\n        '     ng-style=\"{position: \\'relative\\'}\">\\n' +\n        '    <div class=\"gantt-task-info-content gantt-condensedgroup-info-content\">\\n' +\n        //'        <div gantt-bind-compile-html=\"pluginScope.content\"></div>\\n' +\n        '        <div gantt-bind-compile-html=\"getContent()\"></div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '</div>\\n');\n}]);\n\n//# sourceMappingURL=angular-gantt-tooltips-plugin.js.map\n","/*\nProject: angular-gantt v1.2.10 - Gantt chart component for AngularJS\nAuthors: Marco Schweighauser, Rémi Alvergnat\nLicense: MIT\nHomepage: https://www.angular-gantt.com\nGithub: https://github.com/angular-gantt/angular-gantt.git\n*/\n(function(){\n    'use strict';\n    angular.module('gantt.condensedgroups', ['gantt', 'gantt.condensedgroups.templates']).directive('ganttCondensedGroups', ['ganttUtils', 'GanttHierarchy', '$compile', '$document', function(utils, Hierarchy, $compile, $document) {\n        return {\n            restrict: 'E',\n            require: '^gantt',\n            scope: {\n                enabled: '=?',\n                display: '=?'\n            },\n            link: function(scope, element, attrs, ganttCtrl) {\n                var api = ganttCtrl.gantt.api;\n\n                // Load options from global options attribute.\n                if (scope.options && typeof(scope.options.sortable) === 'object') {\n                    for (var option in scope.options.sortable) {\n                        scope[option] = scope.options[option];\n                    }\n                }\n\n                if (scope.enabled === undefined) {\n                    scope.enabled = true;\n                }\n\n                if (scope.display === undefined) {\n                    scope.display = 'group';\n                }\n\n                scope.hierarchy = new Hierarchy();\n\n                function refresh() {\n                    scope.hierarchy.refresh(ganttCtrl.gantt.rowsManager.filteredRows);\n                }\n\n                ganttCtrl.gantt.api.registerMethod('condensedgroups', 'refresh', refresh, this);\n                ganttCtrl.gantt.$scope.$watchCollection('gantt.rowsManager.filteredRows', function() {\n                    refresh();\n                });\n\n                api.directives.on.new(scope, function(directiveName, rowScope, rowElement) {\n                    if (directiveName === 'ganttRow') {\n                        if (! (rowScope.row.model.condensedGroups instanceof Array)) return;\n\n                        var lifecycleGroupScope = rowScope.$new();\n                        lifecycleGroupScope.pluginScope = scope;\n\n                        var ifElement = $document[0].createElement('div');\n                        angular.element(ifElement).attr('data-ng-if', 'pluginScope.enabled');\n\n                        var lifecycleGroupElement = $document[0].createElement('gantt-condensed-task-group');\n                        if (attrs.templateUrl !== undefined) {\n                            angular.element(lifecycleGroupElement).attr('data-template-url', attrs.templateUrl);\n                        }\n                        if (attrs.template !== undefined) {\n                            angular.element(lifecycleGroupElement).attr('data-template', attrs.template);\n                        }\n\n                        angular.element(ifElement).append(lifecycleGroupElement);\n\n                        rowElement.append($compile(ifElement)(lifecycleGroupScope));\n                    }\n                });\n            }\n        };\n    }]);\n}());\n\n\n(function(){\n    'use strict';\n    angular.module('gantt.condensedgroups').controller('GanttCondensedGroupController', ['$scope', 'GanttCondensedGroups', 'ganttUtils', 'RedmineBaseUrl', function($scope, CondensedGroups, utils, RedmineBaseUrl) {\n        var updateCondensedTaskGroup = function() {\n            var lifecycleGroups = $scope.row.model.condensedGroups;\n\n            var enabledValue = utils.firstProperty([lifecycleGroups], 'enabled', $scope.pluginScope.enabled);\n            if (enabledValue) {\n                $scope.display = utils.firstProperty([lifecycleGroups], 'display', $scope.pluginScope.display);\n                var c = new CondensedGroups($scope.row, $scope.pluginScope);\n                $scope.taskGroups = c.groups;\n\n                //$scope.row.setFromTo();\n                // TODO?: átírja a row-ba a taskGroup alapján a kezdeti és végdátumokat\n                //$scope.row.setFromToByValues($scope.taskGroup.from, $scope.taskGroup.to);\n            } else {\n                $scope.taskGroups = undefined;\n                $scope.display = undefined;\n            }\n        };\n\n        // TODO check\n        $scope.gantt.api.tasks.on.viewChange($scope, function(task) {\n            if ($scope.taskGroup !== undefined) {\n                if ($scope.taskGroup.tasks.indexOf(task) > -1) {\n                    updateCondensedTaskGroup();\n                    if(!$scope.$$phase) {\n                        $scope.$digest();\n                    }\n                } else {\n                    var descendants = $scope.pluginScope.hierarchy.descendants($scope.row);\n                    if (descendants.indexOf(task.row) > -1) {\n                        updateCondensedTaskGroup();\n                        if(!$scope.$$phase) {\n                            $scope.$digest();\n                        }\n                    }\n                }\n            }\n        });\n\n        $scope.isActive = function(taskGroup) {\n          return taskGroup.from <= $scope.gantt.currentDateManager.date &&\n                 $scope.gantt.currentDateManager.date < taskGroup.to;\n        };\n\n        // TODO escape / encode\n        var linkIssue = function(issue) {\n          return \"<a href=\\\"\" + RedmineBaseUrl + \"/issues/\" + issue.id + \"\\\" target=\\\"_blank\\\">\" + issue.subject + \"</a>\";\n        };\n\n        var assignee = function(issue) {\n          return issue.assignee ? \" assignee: \" + issue.assignee : \"\";\n        };\n\n        $scope.currentDateTooltipText = (function() {\n          var details = $scope.row.model.details;\n          var issuesInProgress = _.chain(details.issuesInProgress)\n                                  .map(function(issue) { return linkIssue(issue) + assignee(issue) +\"<br>\"; })\n                                  .reduce(function(a,b) { return a + b; })\n                                  .value();\n          var html =\n            \"<small>Project manager: \"+details.projectManager+'<br/>'+\n            \"Reported status: \"+details.reportedStatus;\n          if (issuesInProgress)\n            html += \"<br>Issues in progress: <br>\"+ issuesInProgress;\n\n          html += \"</small>\";\n          return html;\n        })();\n\n        var removeWatch = $scope.pluginScope.$watch('display', updateCondensedTaskGroup);\n\n        $scope.$watchCollection('gantt.rowsManager.filteredRows', updateCondensedTaskGroup);\n\n        $scope.gantt.api.columns.on.refresh($scope, updateCondensedTaskGroup);\n\n        $scope.$on('$destroy', removeWatch);\n    }]);\n}());\n\n(function(){\n  'use strict';\n  angular.module('gantt.condensedgroups').directive('ganttCondensedTaskGroupItem', ['GanttDirectiveBuilder', function(Builder) {\n    var builder = new Builder('ganttCondensedTaskGroupItem', 'plugins/groups/condensedTaskGroupItem.tmpl.html');\n    /*builder.scope = {\n      tooltipText: '=?'\n    };\n    builder.transclude = true;*/\n    return builder.build();\n  }]);\n}());\n\n(function(){\n  'use strict';\n  angular.module('gantt.condensedgroups').directive('ganttCondensedTaskGroupItemActiveFlag', ['GanttDirectiveBuilder', function(Builder) {\n    var builder = new Builder('ganttCondensedTaskGroupItemActiveFlag', 'plugins/groups/condensedTaskGroupItemActiveFlag.tmpl.html');\n    /*builder.scope = {\n      tooltipText: '=?'\n    };\n    builder.transclude = true;*/\n    return builder.build();\n  }]);\n}());\n\n(function(){\n    'use strict';\n    angular.module('gantt.condensedgroups').directive('ganttCondensedTaskGroup', ['GanttDirectiveBuilder', function(Builder) {\n        var builder = new Builder('ganttCondensedTaskGroup', 'plugins/groups/condensedTaskGroup.tmpl.html');\n        return builder.build();\n    }]);\n}());\n\n\n(function(){\n    'use strict';\n\n    angular.module('gantt').factory('GanttCondensedGroups', ['ganttUtils', function(utils) {\n        var CondensedGroups = function (row, pluginScope) {\n            var self = this;\n\n            self.row = row;\n            self.pluginScope = pluginScope;\n            self.groups = [];\n            self.showGrouping = false;\n\n            var lifecycleGroups = self.row.model.condensedGroups;\n            if (lifecycleGroups.length > 0) {\n                self.showGrouping = true;\n                angular.forEach(lifecycleGroups, function(lifecycleGroup) {\n                    var left = row.rowsManager.gantt.getPositionByDate(lifecycleGroup.from);\n                    var width = row.rowsManager.gantt.getPositionByDate(lifecycleGroup.to) - left;\n\n                    self.groups.push({\n                      left: left,\n                      width: width,\n                      name: lifecycleGroup.name,\n                      inProgress: lifecycleGroup.in_progress,\n                      parentName: row.model.name\n                    });\n                });\n            }\n        };\n        return CondensedGroups;\n    }]);\n}());\n\nangular.module('gantt.condensedgroups.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('plugins/groups/condensedTaskGroupItem.tmpl.html',\n      '<div class=\"gantt-condensed-task-group-item\">\\n' +\n      '        <gantt-condensed-task-group-item-active-flag tooltipText=\"{{currentDateTooltipText}}\"></gantt-condensed-task-group-item-active-flag>' +\n      '        <div class=\"gantt-task-group-left-main\"></div>\\n' +\n      '        <div class=\"gantt-task-group-right-main\"></div>\\n' +\n      '        <div class=\"gantt-task-group-left-symbol\"></div>\\n' +\n      '        <div class=\"gantt-task-group-right-symbol\"></div>\\n' +\n      '</div>\\n');\n\n    $templateCache.put('plugins/groups/condensedTaskGroupItemActiveFlag.tmpl.html',\n      '<div ' +\n      'ng-show=\"isActive(row.model.condensedGroups[$index])\"' +\n      '     ng-style=\"{ \\'left\\': gantt.currentDateManager.position - taskGroup.left - 6 + \\'px\\' }\"' +\n      '     class=\"gantt-task-group-current-date\">' +\n      '</div>\\n');\n\n    $templateCache.put('plugins/groups/condensedTaskGroup.tmpl.html',\n      '<div class=\"gantt-condensed-task-group\" ng-controller=\"GanttCondensedGroupController\">\\n' +\n      '    <div class=\"gantt-task-group\"\\n' +\n      '         ng-class=\"\\'gantt-lifecycle-\\' + taskGroup.name.substr(0,1)\"\\n' +\n      '         ng-style=\"{\\'left\\': taskGroup.left + \\'px\\', \\'width\\': taskGroup.width + \\'px\\'}\"\\n' +\n      '         ng-repeat=\"taskGroup in taskGroups\">\\n' +\n      '        <gantt-condensed-task-group-item tooltipText=\"{{taskGroup.name}}\"></gantt-condensed-task-group-item>\\n' +\n      '    </div>\\n' +\n      '</div>\\n');\n}]);\n\n//# sourceMappingURL=angular-gantt-condensedgroups-plugin.js.map\n","'use strict';\n\n/**\n * @ngdoc overview\n * @name ng-gantt\n * @description\n * # ng-gantt\n *\n * Main module of the application.\n */\n\nvar gbGantt = angular.module('gbGantt', [\n    'ng',\n    'restangular',\n    'ui.router',\n    'gantt',\n    'gantt.tree',\n    'gantt.groups',\n    'gantt.tooltips',\n    'gantt.progress',\n    'gantt.dependencies',\n    'gantt.condensedgroups',\n    'gantt.condensedtooltips'\n]);\n\n\n//gbGantt.constant('RedmineBaseUrl', 'http://127.0.0.1:9000/redmine-proxy.php/');\ngbGantt.constant('_', window._);\ngbGantt.constant('RedmineBaseUrl', 'http://redmine.assist01.gbart.h3.hu')\n\n// Configurations\ngbGantt.config(function ($stateProvider, RestangularProvider, RedmineBaseUrl) {\n\n  // States\n  $stateProvider\n    .state('login', {\n      url: \"/login\",\n      templateUrl: 'views/login.html',\n      controller: 'LoginCtrl'\n    })\n    .state('default', {\n      url: \"/\",\n      templateUrl: 'views/projects.html',\n      controller: 'ProjectsController',\n      resolve: {\n        projectIds: function($stateParams, ProjectsRepository) {\n          var promise = ProjectsRepository.getAllProjects();\n          promise.then(function(a){\n            $stateParams.projectIds = a;\n          });\n\n          return promise;\n        }\n      }\n    })\n\n    .state('projectgantt', {\n      url: \"/project/:projectId/gantt\",\n      templateUrl: 'views/project-gantt.html',\n      controller: 'ProjectGanttCtrl'\n    })\n\n    .state('condensedgantt', {\n      url: \"/project/:projectId/condensedgantt\",\n      templateUrl: 'views/condensed-gantt.html',\n      controller: 'CondensedGanttCtrl',\n      resolve: {\n        projectIds: function ($stateParams, ProjectsRepository) {\n          var promise = ProjectsRepository.getAllProjects();\n          promise.then(function (a) {\n            $stateParams.projectIds = a;\n          });\n\n          return promise;\n        }\n      }\n    });\n\n  RestangularProvider.setBaseUrl(RedmineBaseUrl);\n  RestangularProvider.setRequestSuffix('.json');\n  RestangularProvider.setDefaultHttpFields({cache: true});\n\n  RestangularProvider.addResponseInterceptor(function(data, operation, what) {\n    var extractedData;\n    // .. to look for getList operations\n    if (operation === \"getList\") {\n      // .. and handle the data and meta data\n      extractedData = data[what];\n      if (undefined !== extractedData) {\n        extractedData.meta = {totalcount: data.totalcount, offset: data.offset, limit: data.limit};\n      }\n    } else {\n      extractedData = data.data;\n    }\n    return extractedData;\n  });\n});\n\ngbGantt.run(function(User, Restangular, $state, $templateCache) {\n\n  angular.module('ui.tree').config(function(treeConfig) {\n    treeConfig.defaultCollapsed = true;\n  });\n\n\n  //Restangular.setErrorInterceptor(function(response) {\n  //  if (response.status == 401) {\n  //    console.log(\"Login required... \");\n  //    $state.go('default');\n  //  } else if (response.status == 404) {\n  //    $state.go('default');\n  //  } else {\n  //    alert(\"There were an error while connecting to server. We redirect you to the projects page.\");\n  //    $state.go('default');\n  //  }\n  //\n  //  return false;\n  //});\n\n\n  $templateCache.put('plugins/tree/treeBodyChildren.tmpl.html',\n    '<div ng-controller=\"GanttTreeNodeController\"\\n' +\n    '     class=\"gantt-row-label gantt-row-height\"\\n' +\n    '     ng-class=\"row.model.classes\"\\n' +\n    '     ng-style=\"{\\'height\\': row.model.height}\">\\n' +\n    '   <div class=\"gantt-valign-container\">\\n' +\n    '      <div class=\"gantt-valign-content\">\\n' +\n    '         <a ng-disabled=\"isCollapseDisabledOnNode()\" ng-controller=\"GanttTreeNodeToggleController\" data-nodrag\\n' +\n    '            class=\"gantt-tree-handle-button btn btn-xs\"\\n' +\n    '            ng-class=\"{\\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"\\n' +\n    '            ng-click=\"toggleNode()\">'+\n    //'             <span class=\"gantt-label-text\">{{collapsed?\"c\":\"e\"}}</span>' +\n    '             <span\\n' +\n    '                class=\"gantt-tree-handle glyphicon\"\\n' +\n    '                ng-class=\"{\\n' +\n    '                \\'glyphicon-chevron-right\\': collapsed, \\'glyphicon-chevron-down\\': !collapsed,\\n' +\n    '                \\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"></span>\\n' +\n    '         </a>\\n' +\n    //'         <span class=\"gantt-label-text\">{{collapsed?\"c\":\"e\"}}</span>' +\n    '         <span gantt-row-label class=\"gantt-label-text\" gantt-bind-compile-html=\"getRowContent()\"></span>\\n' +\n    '      </div>\\n' +\n    '   </div>\\n' +\n    '</div>\\n' +\n    '<ol ui-tree-nodes ng-class=\"{hidden: collapsed}\" ng-model=\"childrenRows\">\\n' +\n    '  <li ng-repeat=\"row in childrenRows\" ui-tree-node collapsed=\"true\">\\n' +\n    '    <div ng-include=\"\\'plugins/tree/treeBodyChildren.tmpl.html\\'\"></div>\\n' +\n    '  </li>\\n' +\n    '</ol>');\n\n  if (User.getUser()) {\n    Restangular.setDefaultRequestParams({ key: User.apiKey(), proxy_cache: true  });\n\t  if (!$state.is('default')) {\n        $state.go('default');\n\t  }\n  } else {\n    $state.go('login');\n  }\n});\n","(function(){\n    'use strict';\n\n    angular.module('gantt').factory('GanttTaskGroup', ['ganttUtils', 'GanttTask', function(utils, Task) {\n        var TaskGroup = function (row, pluginScope) {\n            var self = this;\n\n            self.row = row;\n            self.pluginScope = pluginScope;\n\n            self.descendants = self.pluginScope.hierarchy.descendants(self.row);\n\n            self.tasks = [];\n            self.overviewTasks = [];\n            self.promotedTasks = [];\n            self.showGrouping = false;\n\n            var groupRowGroups = self.row.model.groups;\n            if (typeof(groupRowGroups) === 'boolean') {\n                groupRowGroups = {enabled: groupRowGroups};\n            }\n\n            var getTaskDisplay = function(task) {\n                var taskGroups = task.model.groups;\n                if (typeof(taskGroups) === 'boolean') {\n                    taskGroups = {enabled: taskGroups};\n                }\n\n                var rowGroups = task.row.model.groups;\n                if (typeof(rowGroups) === 'boolean') {\n                    rowGroups = {enabled: rowGroups};\n                }\n\n                var enabledValue = utils.firstProperty([taskGroups, rowGroups, groupRowGroups], 'enabled', self.pluginScope.enabled);\n\n                if (enabledValue) {\n                    var display = utils.firstProperty([taskGroups, rowGroups, groupRowGroups], 'display', self.pluginScope.display);\n                    return display;\n                }\n            };\n\n            angular.forEach(self.descendants, function(descendant) {\n                angular.forEach(descendant.tasks, function(task) {\n                    var taskDisplay = getTaskDisplay(task);\n                    if (taskDisplay !== undefined) {\n                        self.tasks.push(task);\n                        var clone = new Task(self.row, task.model);\n\n                        if (taskDisplay === 'overview') {\n                            self.overviewTasks.push(clone);\n                        } else if(taskDisplay === 'promote'){\n                            self.promotedTasks.push(clone);\n                        } else {\n                            self.showGrouping = true;\n                        }\n                    }\n                });\n            });\n\n            self.from = undefined;\n            if (groupRowGroups) {\n                self.from = groupRowGroups.from;\n            }\n            if (self.from === undefined) {\n                angular.forEach(self.tasks, function (task) {\n                    if (self.from === undefined || task.model.from < self.from) {\n                        self.from = task.model.from;\n                    }\n                });\n            }\n\n            self.to = undefined;\n            if (groupRowGroups) {\n                self.to = groupRowGroups.to;\n            }\n            if (self.to === undefined) {\n                angular.forEach(self.tasks, function (task) {\n                    if (self.to === undefined || task.model.to > self.to) {\n                        self.to = task.model.to;\n                    }\n                });\n            }\n\n            if (self.from && self.to) self.showGrouping = true;\n\n            if (self.showGrouping) {\n                self.left = row.rowsManager.gantt.getPositionByDate(self.from);\n                self.width = row.rowsManager.gantt.getPositionByDate(self.to) - self.left;\n            }\n        };\n        return TaskGroup;\n    }]);\n}());\n","gbGantt.controller('ProjectsController', function($scope, Restangular, RedmineBaseUrl, $compile, moment, _, PrepareIssues, $timeout, $window, $q, ganttLayout, projectIds) {\n  $scope.loading = true;\n\n  projectIds = _.map(projectIds, function(item) {\n    return item.id;\n  });\n\n  function projectId(rowId) {\n    return \"project_\" + rowId;\n  }\n\n  function setGanttSpan(projects) {\n    var projectStartDate = _.minBy(projects, function(cp) { return new Date(cp.start_date); });\n    projectStartDate = projectStartDate ? projectStartDate.start_date : (function(){ var d = new Date();d.setUTCFullYear(d.getUTCFullYear()-1); return d;})().toISOString().substring(0, 10);\n    var projectDueDate = _.maxBy(projects, function(cp) { return new Date(cp.due_date); });\n    projectDueDate = projectDueDate ? projectDueDate.due_date : new Date();\n\n\n\n    $scope.options.fromDate = projectStartDate;\n    $scope.options.toDate = projectDueDate;\n  }\n\n  function projectsLoaded(projects) {\n    var data = [];\n\n    _.each(projects, function(project) {\n      var condensedProjectRow = {\n        isProject: true,\n        projectId: project.id,\n        id: projectId(project.id),\n        name: project.name || \"project \" + project.projectId,\n        groups: false,\n        classes: ['gantt-row-lifecycle'],\n        parent: projectId(project.parent_id),\n        details: {\n          projectManager: project.project_manager || '-',\n          reportedStatus: project.reported_status,\n          issuesInProgress: project.in_progress_issues\n        }\n      };\n\n      var hasLifecycleCategories = !_.isEmpty(project.lifecycle_categories);\n      if (false && !hasLifecycleCategories) { //TODO: ez hibas mert lehet alprojektje attol meg h vannak lifecycle categoryk alatta\n        var childProjects = _.filter(projects, { 'parent_id': project.id });\n        if (childProjects.length > 0) {\n          var projectStartDate = _.minBy(childProjects, function(cp) { return new Date(cp.start_date); }).start_date;\n          var projectDueDate = _.maxBy(childProjects, function(cp) { return new Date(cp.due_date); }).due_date;\n\n          condensedProjectRow.groups = { enabled: true, display: 'group', from: moment(projectStartDate), to: moment(projectDueDate) };\n        }\n      }\n      if (hasLifecycleCategories) {\n        condensedProjectRow.condensedGroups = [];\n\n        _.each(_.sortBy(project.lifecycle_categories, function (x) {\n          return x.name;\n        }), function (lifecycleCategory) {\n          var lifecycleGroup = {\n            from: moment(lifecycleCategory.start_date),\n            to: moment(lifecycleCategory.due_date),\n            name: lifecycleCategory.name,\n            in_progress: lifecycleCategory.in_progress\n          };\n\n          condensedProjectRow.condensedGroups.push(lifecycleGroup);\n        });\n      }\n\n      //condensedProjectRow.groups = false;condensedProjectRow.condensedGroups = [];//TODO: remove, this line resets the data on gantt\n      data.push(condensedProjectRow);\n    });\n\n    console.log('projectsLoaded, data=',data);\n\n\n    setGanttSpan(projects);\n\n    $scope.data = data;\n  }\n\n  function applyFilters() {\n    $scope.api.rows.refresh();\n    $scope.toggleMenu();\n  }\n\n\n  var destroyOpenProjectListener = $scope.$on('openProject', function(e, projectRowScope) {\n    //return;//TODO: remove\n    var rowId = projectRowScope.row.model.id;\n    var projectId = projectRowScope.row.model.projectId;\n    var projectParent = projectRowScope.row.model.parent;\n\n    console.log('ProjectController.on(openProject)', projectRowScope, '...loading issues...');\n\n    Restangular.all('issues').getList({ project_id: projectId, limit: 100, include: 'relations', status_id: '*', start_date: '*' }).then(\n      function(issues) {\n        Restangular.stripRestangular(issues);\n        console.log('ProjectController.on(openProject).issues_loaded', issues, 'broadcasting \"projectOpened('+projectId+')\"');\n        $scope.$broadcast('projectOpened', projectId);\n\n        var newRows = PrepareIssues(issues, rowId, projectId);\n        var filteredRows = _.filter($scope.data, function(ganttRow) {\n          // never get rid of the 'project rows'\n          if (ganttRow.isProject) {\n            return true;\n          }\n\n          return ganttRow.projectId === projectId;\n        });\n\n        $scope.data = filteredRows.concat(newRows);\n        $scope.openedProject = projectId;\n\n        console.log('ProjectController.on(openProject).issues_loaded', 'invoking projectRowScope.toggle', projectRowScope, projectRowScope.toggle);\n        projectRowScope.toggle();//TODO: this probably should be disabled...\n\n        $timeout(function() {\n          $scope.api.side.setWidth(undefined);\n        }, 0);\n      });\n  });\n\n  var destroyCloseProjectListener = $scope.$on('closeProject', function (e, projectRowScope) {\n    var projectId = projectRowScope.row.model.projectId;\n\n    console.log('ProjectController.on(closeProject)', projectRowScope, ' projectId = ', projectId);\n\n    $scope.data = _.filter($scope.data, function(ganttRow) {\n      if (ganttRow.isProject) {\n        return true;\n      }\n\n      return ganttRow.projectId !== projectId;\n    });\n\n    projectRowScope.toggle();\n  });\n\n  $scope.$on('destroy', function() {\n    destroyOpenProjectListener();\n    destroyCloseProjectListener();\n  });\n\n  $scope.filter = {\n    row: \"\",\n    category: \"\"\n  };\n\n  $scope.filterRow = function ($event) {\n    if ($event.which === 13) {\n      applyFilters();\n    }\n  };\n\n  $scope.filterCategory = applyFilters;\n\n  $scope.filterRowFunc = function (row) {\n    var rowValue = $scope.filter.row;\n    var categoryValue = $scope.filter.category;\n    var rowVisibleByRowFilter = true;\n    var rowVisibleByCategoryFilter = true;\n\n    if (rowValue !== undefined && rowValue != '') {\n      rowVisibleByRowFilter = row.model.name.indexOf(rowValue) > -1;\n    }\n\n    if (categoryValue !== undefined && categoryValue !== '') {\n      if (row.model.condensedGroups === undefined) {\n        console.log('hiding row', row.model.name, row.model.projectId);\n        rowVisibleByCategoryFilter = false;\n      } else {\n        rowVisibleByCategoryFilter =\n          _.chain(row.model.condensedGroups)\n            .map(function (group) {\n              return group.name.substr(0, 1) == categoryValue && $scope.isActiveLifecycleCategory(group)\n            })\n            //.tap(function(a) { console.log(a)})\n            .any()\n            .value();\n      }\n    }\n\n    //console.log('row: ', rowVisibleByRowFilter, ', category: ', rowVisibleByCategoryFilter);\n    return rowVisibleByRowFilter && rowVisibleByCategoryFilter;\n  };\n\n  $scope.isActiveLifecycleCategory = function(lifecycleCategory) {\n    return lifecycleCategory.from <= $scope.api.gantt.currentDateManager.date &&\n      $scope.api.gantt.currentDateManager.date < lifecycleCategory.to;\n  };\n\n  $scope.showMenu = false;\n  $scope.toggleMenu = function() { $scope.showMenu = !$scope.showMenu };\n\n  $scope.maxHeight = function() {\n    return $window.innerHeight;\n  };\n\n  $scope.options = {\n    timeFrames: {\n      'day': {\n        start: moment('10:00', 'HH:mm'),\n        end: moment('18:00', 'HH:mm'),\n        working: true,\n        default: true\n      },\n      'weekend': {\n        working: false\n      }\n    },\n    dateFrames: {\n      'weekend': {\n        evaluator: function(date) {\n          return date.isoWeekday() === 6 || date.isoWeekday() === 7;\n        },\n        targets: ['weekend']\n      }\n    },\n    rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\n    taskContent : '<i class=\"fa fa-tasks\"></i> <a href=\"'+RedmineBaseUrl+'/issues/{{task.model.issueId}}\" target=\"_blank\">{{task.model.name}}</a>',\n    columnWidth: 18,\n    currentDate: 'line',\n    currentDateValue: new Date(moment().format(\"YYYY\"), moment().format(\"M\") -1, moment().format(\"D\"))\n    //currentDateValue: new Date(2015, 5, 12)//, 9, 0, 0)\n  };\n\n  $scope.registerApi = function(api) {\n    $scope.api = api;\n    $controllerScope = $scope;\n\n    api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n\n      if (dName === 'ganttScrollable') {\n        dScope.getScrollableCss = function() {\n          var css = {};\n\n          //var maxHeight = dScope.gantt.options.value('maxHeight');\n          var maxHeight = $controllerScope.maxHeight();\n          if (maxHeight > 0) {\n            css['max-height'] = maxHeight - dScope.gantt.header.getHeight() + 'px';\n            css['min-height'] = css['max-height'];\n            css['overflow-y'] = 'auto';\n\n            if (dScope.gantt.scroll.isVScrollbarVisible()) {\n              css['border-right'] = 'none';\n            }\n          }\n\n          var columnWidth = dScope.gantt.options.value('columnWidth');\n          var bodySmallerThanGantt = dScope.gantt.width === 0 ? false: dScope.gantt.width < dScope.gantt.getWidth() - dScope.gantt.side.getWidth();\n          if (columnWidth !== undefined && bodySmallerThanGantt) {\n            css.width = (dScope.gantt.width + dScope.gantt.scroll.getBordersWidth() - 10) + 'px';\n          }\n\n          return css;\n        };\n      }\n\n      // override gantt-tree-body's css to have min-height set\n      if (dName === 'ganttTreeBody') {\n        dScope.getLabelsCss = function() {\n          var css = {};\n\n          if (dScope.maxHeight) {\n            var hScrollBarHeight = ganttLayout.getScrollBarHeight();\n            var bodyScrollBarHeight = dScope.gantt.scroll.isHScrollbarVisible() ? hScrollBarHeight : 0;\n            css['height'] = dScope.maxHeight - bodyScrollBarHeight - dScope.gantt.header.getHeight() + 'px';\n          }\n\n          return css;\n        };\n      }\n\n      // override gantt-body-rows's css to have min-height set\n      if (dName === 'ganttBodyRows') {\n        dScope.getGanttBodyRowsCss = function() {\n          var css = {};\n\n          if (dScope.maxHeight) {\n            var hScrollBarHeight = ganttLayout.getScrollBarHeight();\n            var bodyScrollBarHeight = dScope.gantt.scroll.isHScrollbarVisible() ? hScrollBarHeight : 0;\n            css['min-height'] = dScope.maxHeight - bodyScrollBarHeight - dScope.gantt.header.getHeight() + 'px';\n          }\n\n          return css;\n        };\n\n        // the compilation throws error with the ng-transclude attribute..\n        dElement.removeAttr('ng-transclude');\n        dElement.attr('ng-style', 'getGanttBodyRowsCss()');\n        $compile(dElement)(dScope);\n      }\n    });\n\n    api.core.on.ready($scope, function(api) {\n\n      // scroll to the current date after the columns are displayed\n      api.columns.on.generate($scope, function() {\n        $timeout(function() {\n          $scope.api.scroll.toDate($scope.options.currentDateValue);\n          $scope.readyToShow = true;\n        }, 0);\n      });\n\n      api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n        if (dName === 'ganttTaskContent') {\n          dElement.attr('inview', '');\n          $compile(dElement)(dScope);\n        }\n      });\n\n      var allProjectsData = [];\n      var getNextProject = function(i) {\n        $scope.loading = true;\n        if (i >= projectIds.length) {\n          throw 'Index overflow';\n        }\n\n        var projectId = projectIds[i];\n\n        Restangular.one('ganttprojects', projectId).getList().then(function(data) {\n          Restangular.stripRestangular(data);\n          allProjectsData.push(data);\n\n          if (i < projectIds.length-1) {\n            getNextProject(i+1);\n          } else {\n            allProjectsLoaded(allProjectsData);\n          }\n\n        }, function(err) {\n          if (i < projectIds.length) {\n            getNextProject(i+1);\n          } else {\n            allProjectsLoaded(allProjectsData);\n          }\n        });\n      };\n      var allProjectsLoaded = function(data) {\n        $scope.loading = false;\n\n        var allProjects = _.chain(data)\n          .map(function(projectRestangular) { return projectRestangular.plain(); })\n          .flatten()\n          .filter(function(project) { return _.filter(projectIds, project.id) })\n          .value();\n\n        projectsLoaded(allProjects);\n\n        $timeout(function() {\n          $scope.api.tree.collapseAll();\n\n          $scope.api.side.setWidth(undefined);\n        }, 0);\n      };\n      if (projectIds.length > 0) {\n        getNextProject(0);\n      } else {\n        allProjectsLoaded([]);\n      }\n    });\n  };\n});\n","'use strict';\n\n/**\n * @ngdoc function\n * @name ng-gantt.controller:CondensedGanttCtrl\n * @description\n * # CondensedGanttCtrl\n * Controller of the condensed gantt\n */\ngbGantt.controller('CondensedGanttCtrl', function ($scope, Restangular, RedmineBaseUrl, $compile, moment, _, PrepareIssues, $timeout, $window, projectIds, $q, ganttLayout) {\n\n    \n \n    function projectId(rowId) {\n      return \"project_\" + rowId;\n    }\n\n    var destroyOpenProjectListener = $scope.$on('openProject', function(e, projectRowScope) {\n      var rowId = projectRowScope.row.model.id;\n      var projectId = projectRowScope.row.model.projectId;\n      var projectParent = projectRowScope.row.model.parent;\n\n      Restangular.all('issues').getList({ project_id: projectId, limit: 100, include: 'relations', status_id: '*' }).then(\n        function(issues) {\n\n          $scope.$broadcast('projectOpened', projectId);\n\n          var newRows = PrepareIssues(issues, rowId, projectId);\n          var filteredRows = _.filter($scope.data, function(ganttRow) {\n            // never get rid of the 'project rows'\n            if (ganttRow.isProject) return true;\n\n            // keep the rows under the opened project\n            //console.log('keeping row: ', ganttRow.projectId == projectId);\n            return ganttRow.projectId == projectId;\n          });\n\n          $scope.data = filteredRows.concat(newRows);\n          $scope.openedProject = projectId;\n\n          console.log(\"(open) now toggle\", projectId);\n          projectRowScope.toggle();\n\n          $timeout(function() {\n            $scope.api.side.setWidth(undefined);\n          }, 0);\n        });\n    });\n\n    var destroyCloseProjectListener = $scope.$on('closeProject', function (e, projectRowScope) {\n      var projectId = projectRowScope.row.model.projectId;\n      $scope.data = _.filter($scope.data, function(ganttRow) {\n        if (ganttRow.isProject) return true;\n\n        return ganttRow.projectId != projectId;\n      });\n\n      console.log(\"(close) now toggle\", projectId);\n      projectRowScope.toggle();\n    });\n\n    $scope.$on('destroy', function() {\n      destroyOpenProjectListener();\n      destroyCloseProjectListener();\n    });\n\n    $scope.filter = {\n      row: \"\",\n      category: \"\"\n    };\n\n    $scope.filterRow = function ($event) {\n      if ($event.which === 13) {\n        applyFilters();\n      }\n    };\n\n    $scope.filterCategory = function() { applyFilters(); };\n\n    var applyFilters = function() {\n      $scope.api.rows.refresh();\n      $scope.toggleMenu();\n    };\n\n    /*\n    var filterRowsFunc = function (rows) {\n      return _.filter(rows, function(row) { return $scope.filterRowFunc(row) });\n    };*/\n\n    $scope.filterRowFunc = function (row) {\n      var rowValue = $scope.filter.row;\n      var categoryValue = $scope.filter.category;\n      var rowVisibleByRowFilter = true;\n      var rowVisibleByCategoryFilter = true;\n\n      if (rowValue !== undefined && rowValue != '') {\n        rowVisibleByRowFilter = row.model.name.indexOf(rowValue) > -1;\n      }\n\n      if (categoryValue !== undefined && categoryValue !== '') {\n        if (row.model.condensedGroups === undefined) {\n          console.log('hiding row', row.model.name, row.model.projectId);\n          rowVisibleByCategoryFilter = false;\n        } else {\n          rowVisibleByCategoryFilter =\n            _.chain(row.model.condensedGroups)\n              .map(function (group) {\n                return group.name.substr(0, 1) == categoryValue && $scope.isActiveLifecycleCategory(group)\n              })\n              //.tap(function(a) { console.log(a)})\n              .any()\n              .value();\n        }\n      }\n\n      //console.log('row: ', rowVisibleByRowFilter, ', category: ', rowVisibleByCategoryFilter);\n      return rowVisibleByRowFilter && rowVisibleByCategoryFilter;\n    };\n\n    // TODO: remove duplicated logic (see condensedgroups plugin)\n    $scope.isActiveLifecycleCategory = function(lifecycleCategory) {\n      return lifecycleCategory.from <= $scope.api.gantt.currentDateManager.date &&\n        $scope.api.gantt.currentDateManager.date < lifecycleCategory.to;\n    };\n\n    $scope.showMenu = false;\n    $scope.toggleMenu = function() { $scope.showMenu = !$scope.showMenu };\n\n    // TODO: causes flicker when opening a project\n    $scope.maxHeight = function() {\n      return $window.innerHeight;\n    };\n\n    $scope.options = {\n      timeFrames: {\n        'day': {\n          start: moment('10:00', 'HH:mm'),\n          end: moment('18:00', 'HH:mm'),\n          working: true,\n          default: true\n        },\n        'weekend': {\n          working: false\n        }\n      },\n      dateFrames: {\n        'weekend': {\n          evaluator: function(date) {\n            return date.isoWeekday() === 6 || date.isoWeekday() === 7;\n          },\n          targets: ['weekend']\n        }\n      },\n      rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\n      taskContent : '<i class=\"fa fa-tasks\"></i> <a href=\"'+RedmineBaseUrl+'/issues/{{task.model.issueId}}\" target=\"_blank\">{{task.model.name}}</a>',\n      columnWidth: 18,\n      currentDate: 'line',\n      currentDateValue: new Date(moment().format(\"YYYY\"), moment().format(\"M\") -1, moment().format(\"D\"))\n      //currentDateValue: new Date(2015, 5, 12)//, 9, 0, 0)\n    };\n\n    $scope.registerApi = function(api) {\n      $scope.api = api;\n\n      api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n\n        // TODO: same in project-gantt\n        // override the gantt-scrollable's css to have min-height set\n        if (dName === 'ganttScrollable') {\n          dScope.getScrollableCss = function() {\n            var css = {};\n\n            var maxHeight = dScope.gantt.options.value('maxHeight');\n            if (maxHeight > 0) {\n              css['max-height'] = maxHeight - dScope.gantt.header.getHeight() + 'px';\n              css['min-height'] = css['max-height'];\n              css['overflow-y'] = 'auto';\n\n              if (dScope.gantt.scroll.isVScrollbarVisible()) {\n                css['border-right'] = 'none';\n              }\n            }\n\n            var columnWidth = dScope.gantt.options.value('columnWidth');\n            var bodySmallerThanGantt = dScope.gantt.width === 0 ? false: dScope.gantt.width < dScope.gantt.getWidth() - dScope.gantt.side.getWidth();\n            if (columnWidth !== undefined && bodySmallerThanGantt) {\n              css.width = (dScope.gantt.width + dScope.gantt.scroll.getBordersWidth()) + 'px';\n            }\n\n            return css;\n          };\n        }\n\n        // override gantt-tree-body's css to have min-height set\n        if (dName === 'ganttTreeBody') {\n          dScope.getLabelsCss = function() {\n            var css = {};\n\n            if (dScope.maxHeight) {\n              var hScrollBarHeight = ganttLayout.getScrollBarHeight();\n              var bodyScrollBarHeight = dScope.gantt.scroll.isHScrollbarVisible() ? hScrollBarHeight : 0;\n              css['height'] = dScope.maxHeight - bodyScrollBarHeight - dScope.gantt.header.getHeight() + 'px';\n            }\n\n            return css;\n          };\n        }\n\n        // override gantt-body-rows's css to have min-height set\n        if (dName === 'ganttBodyRows') {\n          dScope.getGanttBodyRowsCss = function() {\n            var css = {};\n\n            if (dScope.maxHeight) {\n              var hScrollBarHeight = ganttLayout.getScrollBarHeight();\n              var bodyScrollBarHeight = dScope.gantt.scroll.isHScrollbarVisible() ? hScrollBarHeight : 0;\n              css['min-height'] = dScope.maxHeight - bodyScrollBarHeight - dScope.gantt.header.getHeight() + 'px';\n            }\n\n            return css;\n          };\n\n          // the compilation throws error with the ng-transclude attribute..\n          dElement.removeAttr('ng-transclude');\n          dElement.attr('ng-style', 'getGanttBodyRowsCss()');\n          $compile(dElement)(dScope);\n        }\n      });\n\n      api.core.on.ready($scope, function(api) {\n\n        // scroll to the current date after the columns are displayed\n        api.columns.on.generate($scope, function() {\n          $timeout(function() {\n            $scope.api.scroll.toDate($scope.options.currentDateValue);\n            $scope.readyToShow = true;\n          }, 0);\n        });\n\n        api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n          if (dName === 'ganttTaskContent') {\n            dElement.attr('inview', '');\n            $compile(dElement)(dScope);\n          }\n        });\n\n        var promises = [];\n        var allProjectsData = [];\n\n        var getNextProject = function(i){\n          console.log('getNextProject.invoke',i);\n          var projectId = projectIds[i];\n          var promise = Restangular.one('ganttprojects', projectId).getList();\n          promises.push(promise);\n\n          promise.then(function(data){\n            allProjectsData.push(data);\n            if (i<projectIds.length) {\n              console.log('getNextProject.then',i);\n              getNextProject(i+1);\n            } else {\n              console.log('getNextProject.then - last project loaded',i);\n              allProjectsLoaded(allProjectsData);\n            }\n          }, function(){\n            console.warn('getNextProject.then - error', arguments);\n          });\n\n        }\n\n        var allProjectsLoaded = function(data) {\n          console.log('$q.all(promises)', arguments);\n          var allProjects = _.chain(data)\n                             .map(function(projectRestangular) { return projectRestangular.plain(); })\n                             .flatten()\n                             .filter(function(project) { return _.filter(projectIds, project.id) })\n                             .value();\n\n          projectsLoaded(allProjects);\n\n          // collapse this way or need to override another tree tmpl..\n          $timeout(function() {\n            $scope.api.tree.collapseAll();\n\n            $scope.api.side.setWidth(undefined);\n          }, 0);\n        };\n\n        getNextProject(0);\n      });\n    };\n\n    function projectsLoaded(projects) {\n      var data = [];\n\n      _.each(projects, function(project) {\n        var condensedProjectRow = {\n          isProject: true,\n          projectId: project.id,\n          id: projectId(project.id),\n          name: project.name || \"project \" + project.projectId,\n          groups: false,\n          classes: ['gantt-row-lifecycle'],\n          parent: projectId(project.parent_id),\n          details: {\n            projectManager: project.project_manager || '-',\n            reportedStatus: project.reported_status,\n            issuesInProgress: project.in_progress_issues\n          }\n        };\n\n        if (_.isEmpty(project.lifecycle_categories)) {\n          var childProjects = _.filter(projects, { 'parent_id': project.id });\n          var projectStartDate = _.min(childProjects, function(cp) { return new Date(cp.start_date) }).start_date;\n          var projectDueDate = _.max(childProjects, function(cp) { return new Date(cp.due_date) }).due_date;\n\n          // TODO\n          $scope.options.fromDate = projectStartDate;\n          $scope.options.toDate = projectDueDate;\n\n          condensedProjectRow.groups = { enabled: true, display: 'group', from: moment(projectStartDate), to: moment(projectDueDate) };\n        } else {\n          condensedProjectRow.condensedGroups = [];\n\n          _.each(_.sortBy(project.lifecycle_categories, function (x) {\n            return x.name\n          }), function (lifecycleCategory) {\n            var lifecycleGroup = {\n              from: moment(lifecycleCategory.start_date),\n              to: moment(lifecycleCategory.due_date),\n              name: lifecycleCategory.name,\n              in_progress: lifecycleCategory.in_progress\n            };\n\n            condensedProjectRow.condensedGroups.push(lifecycleGroup);\n          });\n        }\n        data.push(condensedProjectRow);\n      });\n\n      setGanttSpan(projects);\n\n      $scope.data = data;\n    }\n\n    function setGanttSpan(projects) {\n      var projectStartDate = _.min(projects, function(cp) { return new Date(cp.start_date) }).start_date;\n      var projectDueDate = _.max(projects, function(cp) { return new Date(cp.due_date) }).due_date;\n\n      $scope.options.fromDate = projectStartDate;\n      $scope.options.toDate = projectDueDate;\n    }\n\n\n    console.log('CondensedGanttCtrl');\n  });\n","'use strict';\n\ngbGantt.controller('GanttTreeNodeToggleController', function($scope) {\n    $scope.toggleNode = function() {\n      console.log('GanttTreeNodeToggleController.toggleNode, $scope.collapsed = ',$scope.collapsed, 'isProjectRow() = ', isProjectRow());\n      if (isProjectRow()) {\n        toggleProject();\n      } else {\n        if (!$scope.isCollapseDisabled()) {\n          $scope.toggle();\n        }\n      }\n    };\n\n    $scope.isCollapseDisabledOnNode = function() {\n      //console.log('GanttTreeNodeToggleController.isCollapseDisabledOnNode, isProjectRow()= ', isProjectRow());\n      if (isProjectRow()) {\n        return false;\n      } else {\n        return $scope.isCollapseDisabled();\n      }\n    };\n\n    $scope.$on(\"projectOpened\", function (e, projectId) {\n      if (!isProjectRow()) {\n        return;\n      }\n\n      var closingThisProject = $scope.row.model.projectId !== projectId;\n      console.log('GanttTreeNodeToggleController.projectOpened event caught, args.projectId', projectId, 'this.row.model.projectId', $scope.row.model.projectId, ' closingThis? ', closingThisProject, 'collapsed = ',$scope.collapsed);\n      if (closingThisProject) {\n        $scope.closeProject();\n      } else {\n        if ($scope.collapsed) {\n          console.warn('GanttTreeNodeToggleController.projectOpened event caught', 'this project got opened but still collapsed = ',$scope.collapsed);\n        }\n      }\n    });\n\n    $scope.openProject = function () {\n      if (!$scope.collapsed) {\n        return;\n      }\n      console.log('GanttTreeNodeToggleController.openProject, model = ', $scope.row.model)\n      $scope.collapsed = false;\n\n      $scope.$emit('openProject', $scope);\n\n      var idx = $scope.row.model.classes.indexOf('gantt-row-expanded');\n      if (idx === -1) {\n        $scope.row.model.classes.push('gantt-row-expanded');\n      }\n    };\n\n    $scope.closeProject = function () {\n      if ($scope.collapsed) {\n        return;\n      }\n      console.log('GanttTreeNodeToggleController.closeProject, model = ', $scope.row.model)\n      $scope.collapsed = true;\n\n      if ($scope.row.model.parent) {\n        console.log('GanttTreeNodeToggleController.closeProject, emitting \"closeProject\"');\n        $scope.$emit('closeProject', $scope);\n      } else {\n        $scope.toggle();\n      }\n\n      var idx = $scope.row.model.classes.indexOf('gantt-row-expanded');\n      if (idx > -1) {\n        $scope.row.model.classes.splice(idx, 1);\n      }\n    };\n\n    var isProjectRow = function() {\n      return $scope.row.model.condensedGroups instanceof Array;\n    };\n\n    var toggleProject = function () {\n      console.log('GanttTreeNodeToggleController.toggleProject, $scope.collapsed = ',$scope.collapsed);\n      if ($scope.collapsed) {\n        $scope.openProject();\n      } else {\n        $scope.closeProject();\n      }\n    };\n\n    if (isProjectRow()) {\n      //$scope.collapsed = true;\n    }\n  });\n","'use strict';\n\ngbGantt.controller('LoginCtrl', function ($scope, $window, $state, User, Restangular) {\n    $scope.login = function(credentials){\n        User.login(credentials)\n            .then(function(response){\n                var user = response.data.user;\n                User.setUser(user);\n                Restangular.setDefaultRequestParams({ key: user.api_key });\n                $state.go('default');\n            }, function(){\n                $window.alert('Wrong username or password!');\n            });\n    };\n  });\n","'use strict';\n\ngbGantt.controller('MainCtrl', function ($scope, Restangular, $state, $q) {\n\t  var pageSize = 100;\n\t  var maxPage = 5;\n\t  $scope.projects = [];\n\n\t  getProjectsPage(0);\n\n\t  $scope.showGantt = function(projectId) {\n\t\t  $state.go(\"projectgantt\", {projectId: projectId});\n\t  };\n\n    $scope.showCondensedGantt = function(projectId) {\n      $state.go(\"condensedgantt\", {projectId: projectId});\n    };\n\n\t\tfunction getProjectsPage(page) {\n\t\t\tRestangular.all('projects').getList({limit: pageSize, offset: page * pageSize}).then(function(projects) {\n\t\t\t\tvar filteredProjects = _.filter(projects, { parent: {name: \"8 Ways\"} });\n\t\t\t\t$scope.projects = $scope.projects.concat(_.map(filteredProjects, function(p) { return _.pick(p, 'id', 'name') }));\n\n\t\t\t\tif (++page < maxPage) {\n\t\t\t\t\tgetProjectsPage(page);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n  });\n","'use strict';\n\n/**\n * @ngdoc function\n * @name ng-gantt.controller:ProjectGanttCtrl\n * @description\n * # ProjectGanttCtrl\n * Controller of the project gantt\n */\ngbGantt.controller('ProjectGanttCtrl', function ($scope, Restangular, $stateParams, RedmineBaseUrl, $compile, moment, _, PrepareIssues, $window, $timeout) {\n    $scope.registerApi = function(api) {\n        $scope.api = api;\n\n        api.core.on.ready($scope, function(api) {\n            console.log('ready');\n            api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n                if (dName === 'ganttTaskContent') {\n                    dElement.attr('inview', '');\n                    $compile(dElement)(dScope);\n                }\n            });\n\n            Restangular.all('issues').getList({ project_id: $stateParams.projectId, limit: 100, include: 'relations', status_id: '*' })\n                .then(function(issues) {\n\n                    // hacky solution; expand-to-fit attribute seems to have problems\n                    //expandGanttTimeSpan(issues);\n\n                    $scope.data = PrepareIssues(issues);\n                  console.log($scope.data)\n\n                    $timeout(function() {\n                        $scope.api.side.setWidth(undefined);\n                    }, 0);\n                });\n        });\n    };\n\n    var contextMenuOptions = [\n            ['Context item 1', function (a) {\n\n            }],\n            null,\n            ['Context item 2', function (a) {\n\n            }],\n            null,\n            ['More...', [\n                ['Sub item 1', function ($itemScope) {\n\n                }],\n                null,\n                ['Sub item 2', function ($itemScope) {\n\n                }]\n            ]]\n    ];\n\n    $scope.options = {\n        // if the whole project's span is less than about 4 months, expand it by setting the dates explicitly\n        //fromDate: new Date(2016,0,20),\n        //toDate: new Date(2016,4,20),\n        columnWidth: 18,\n        currentDate: 'line',\n        timeFrames: {\n            'day': {\n                start: moment('10:00', 'HH:mm'),\n                end: moment('18:00', 'HH:mm'),\n                working: true,\n                default: true\n            },\n            'weekend': {\n                working: false\n            }\n        },\n\n        dateFrames: {\n            'weekend': {\n                evaluator: function(date) {\n                    return date.isoWeekday() === 6 || date.isoWeekday() === 7;\n                },\n                targets: ['weekend']\n            }\n        },\n\n        //contextMenuOptions: contextMenuOptions,\n        rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\n        taskContent : '<i class=\"fa fa-tasks\"></i> <span ng-context-menu=\"contextMenuOptions\"><a href=\"'+RedmineBaseUrl+'/issues/{{task.model.issueId}}\" target=\"_blank\">{{task.model.name}}</a></span>',\n    };\n\n    $scope.maxHeight = function() {\n        return $window.innerHeight;\n    };\n\n    function expandGanttTimeSpan(issues) {\n        var start = moment(_.min(issues, function(issue) { return moment(issue.start_date) }).start_date);\n        var end = moment(_.max(issues, function(issue) { return moment(issue.due_date) }).due_date);\n\n        var durationDays = moment.duration(end.diff(start)).asDays();\n        if (durationDays < 130) {\n          $scope.options.fromDate = start.calendar();\n          $scope.options.toDate = start.add(130, 'days').calendar();\n        }\n    }\n});\n","'use strict';\n// borrowed from https://stackoverflow.com/questions/29764079/angularjs-creating-context-menu-with-submenu\n\ngbGantt.directive('ngContextMenu', function ($parse) {\n    var buildMenuItem = function($scope, list, item) {\n        var $li = angular.element('<li>');\n        if (item === null) {\n            $li.addClass('divider');\n        } else if(item[1] instanceof Array) {\n            $li.addClass(\"dropdown-submenu\");\n            var $subMenu = angular.element('<ul class=\"dropdown-menu\">');\n\n            item[1].forEach(function (subItem, x) {\n                buildMenuItem($scope, $subMenu, subItem);\n            });\n\n            var $a = angular.element('<a>');\n            $a.text(item[0]);\n            $li.append($a);\n            $li.append($subMenu);\n        } else {\n            var $a = angular.element('<a>');\n            $a.attr({ tabindex: '-1', href: '#' });\n            $a.text(item[0]);\n            $li.append($a);\n            $li.on('click', function () {\n                $scope.$apply(function() {\n                    item[1].call($scope, $scope);\n                });\n            });\n        }\n        list.append($li);\n    };\n\n    var renderContextMenu = function ($scope, event, options) {\n        angular.element(event.currentTarget).addClass('context');\n        var $contextMenu = angular.element('<div>');\n        $contextMenu.addClass('dropdown clearfix');\n        var $ul = angular.element('<ul>');\n        $ul.addClass('dropdown-menu');\n        $ul.attr({ 'role': 'menu' });\n        $ul.css({\n            display: 'block',\n            position: 'absolute',\n            left: event.pageX + 'px',\n            top: event.pageY + 'px'\n        });\n        angular.forEach(options, function (item, i) {\n            buildMenuItem($scope, $ul, item);\n        });\n        $contextMenu.append($ul);\n        $contextMenu.css({\n            width: '100%',\n            height: '100%',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            zIndex: 9999\n        });\n        angular.element(document).find('body').append($contextMenu);\n        $contextMenu.on(\"click\", function (e) {\n            angular.element(event.currentTarget).removeClass('context');\n            $contextMenu.remove();\n        }).on('contextmenu', function (event) {\n            angular.element(event.currentTarget).removeClass('context');\n            event.preventDefault();\n            $contextMenu.remove();\n        });\n    };\n    return function ($scope, element, attrs) {\n        element.on('contextmenu', function (event) {\n            $scope.$apply(function () {\n                event.preventDefault();\n                var options = $scope.$eval(attrs.ngContextMenu);\n                if (options instanceof Array) {\n                    renderContextMenu($scope, event, options);\n                } else {\n                    throw '\"' + attrs.ngContextMenu + '\" not an array';\n                }\n            });\n        });\n    };\n});\n","'use strict';\n\ngbGantt.directive('inview', function () {\n    var getGanttBodyRight = function() {\n        return document.querySelector('.gantt-body').getClientRects()[0].right;\n    };\n\n    return {\n        link: function(scope, element) {\n            scope.$watch(\n                function() {\n                    var clientRects = element[0].getClientRects();\n                    if (clientRects.length == 0) return true;\n                    return clientRects[0].right <= getGanttBodyRight();\n                },\n                function(newInviewStatus, oldInviewStatus) {\n                    if (! newInviewStatus) {\n                        element[0].style.right = '100%';\n                        element[0].style.left = 'auto';\n                    }\n                }\n            );\n        }\n    }\n});\n","'use strict';\n\ngbGantt.factory('PrepareIssues', function() {\n    return function (issues, root, rootId) {\n      /* debug\n       console.log(issues);\n       _.each(issues, function (issue) {\n       var parentId = issue.parent ? issue.parent.id : null;\n       var lifecycleCategory = _.find(issue.custom_fields, {name: 'Lifecycle category'}).value;\n\n       if (/^A/.test(lifecycleCategory))\n       console.log(issue.custom_fields[4], issue);\n       //console.log(issue.id, issue.subject, parentId, lifecycleCategory);\n       });*/\n\n      var data = [];\n      var issuesDependencies = getIssuesDependencies(issues);\n      var issuesByLifecycle = getIssuesByLifecycle(issues);\n\n      _.each(_.keys(issuesByLifecycle).sort(), function (lifecycle) {\n        var lifecycleRow = {\n          id: lifecycleId(lifecycle, root),\n          name: lifecycle ? lifecycle : '? - OTHER',\n          groups: true,\n          classes: 'gantt-row-lifecycle',\n          projectId: rootId\n        };\n\n        if (root) lifecycleRow.parent = root;\n\n        var sortedLifecycleChildIssues =\n          _.chain(issuesByLifecycle[lifecycle])\n          .sortBy(function (issue) {\n            return getCustomFieldValue(issue, 'Position');\n          })\n          .sortBy(function(issue) {\n            return moment(issue.start_date);\n          }).value();\n\n        _.each(sortedLifecycleChildIssues, function (issue) {\n          var parentRowId = null;\n          if (issue.parent) {\n            var parentTicket = _.find(issues, {id: issue.parent.id});\n            if (parentTicket) {\n              parentRowId = rowId(parentTicket.id);\n            } else {\n              console.warn('Parent ticket not found: ', issue.parent.id);\n              parentRowId = lifecycleId(lifecycle, root);\n            }\n          } else {\n            parentRowId = lifecycleId(lifecycle, root);\n          }\n\n          var assigneeRole = getCustomFieldValue(issue, 'Assignee role');\n          var dependencies = getTaskDependencyParameters(issue, issuesDependencies);\n\n          var row =\n          {\n            id: rowId(issue.id),\n            name: issue.subject,\n            parent: parentRowId,\n            projectId: rootId,\n            tasks: [\n              {\n                issueId : issue.id,\n                id: taskId(issue.id),\n                name: issue.subject,\n                from: issue.start_date,\n                to: (function(issue){\n                  var due = issue.due_date ? moment(issue.due_date) : null;\n                  var start = moment(issue.start_date);\n                  return due < start ? issue.start_date : issue.due_date; // -.-\n                })(issue),\n                type: issue.tracker.name,\n                status: issue.status.name,\n                priority: issue.priority.name,\n                assignee: { role: assigneeRole, fullname: (issue.assigned_to && issue.assigned_to.name) || '-' },\n                progress: { percent: issue.done_ratio, classes: ['ng-gantt-progress'] },\n                classes: getAssigneeClass(assigneeRole),\n                dependencies: dependencies\n              }\n            ]\n          };\n\n          // don't show the group if its a sub-task\n          if (issue.parent) row.groups = false;\n          data.push(row);\n        });\n        data.push(lifecycleRow);\n      });\n\n\n      return data;\n    };\n\n    function lifecycleId(lifecycle, root) {\n      return (root || 'root') + '_lifecycle_' + lifecycle;\n    }\n\n    function rowId(issueId) {\n      return 'row_' + issueId;\n    }\n\n    function taskId(issueId) {\n      return 'task_' + issueId;\n    }\n\n    function getTaskDependencyParameters(issue, issuesDependencies) {\n      var issueDependencies = _.find(issuesDependencies, {id: issue.id});\n      if (issueDependencies === undefined) return [];\n\n      return _.map(issueDependencies.dependencies, function(dependencyId) {\n        return { from: taskId(dependencyId) };\n      });\n    }\n\n    function getIssuesDependencies(issues) {\n      var issuesDependencies = [];\n\n      _.each(issues, function (issue) {\n        if (issue.relations.length == 0) return;\n\n        _.filter(issue.relations, { relation_type: 'precedes' })\n          .forEach(function(precedesRelation) {\n            var issueDependencies;\n            if (issueDependencies = _.find(issuesDependencies, { id: precedesRelation.issue_to_id })) {\n              if (! _.includes(issueDependencies.dependencies, precedesRelation.issue_id))\n                issueDependencies.dependencies.push(precedesRelation.issue_id);\n            } else\n              issuesDependencies.push({ id: precedesRelation.issue_to_id, dependencies: [ precedesRelation.issue_id ] });\n          });\n      });\n\n      return issuesDependencies;\n    }\n\n    function getIssuesByLifecycle(issues) {\n      return _.groupBy(issues, function (issue) {\n        return getCustomFieldValue(issue, 'Lifecycle category', '');\n      });\n    }\n\n    function getCustomFieldValue(issue, name, defaultValue) {\n      var customFieldByName = _.find(issue.custom_fields, {name: name});\n      if (customFieldByName === undefined) return defaultValue;\n\n      return customFieldByName.value;\n    }\n\n    function getAssigneeClass(assignee) {\n      switch (assignee) {\n        case 'Sales': return \"sales-task\";\n        case 'Team': return \"team-task\";\n        case 'PM': return \"pm-task\";\n        case 'Client': return \"client-task\";\n        case '':\n        case undefined: return '';\n        default: throw new Error('Unknown assignee ' + assignee);\n      }\n    }\n  });\n","\ngbGantt.service('ProjectsRepository', function(Restangular, $q){\n  function getAllProjects(){\n    var deferred = $q.defer();\n    var pageSize = 100;\n    var maxPage =  5;\n    var projects = [];\n\n    //pageSize = 10; maxPage = 1; //TODO: Remove\n\n    function getProjectsPage(page) {\n      Restangular.all('projects').getList({limit: pageSize, offset: page * pageSize, proxy_cache: true }).then(function(response) {\n        response = Restangular.stripRestangular(response);\n        var filteredProjects = _.filter(response, { parent: {name: \"8 Ways\"} });\n\n        for (var i=0; i < filteredProjects.length; i++) {\n          if (filteredProjects[i].name !== '8 Ways') {\n            var shouldBeShownInGlobalGantt = false;\n            var customFields = filteredProjects[i].custom_fields;\n            for (var j=0; j<customFields.length; j++) {\n              if ('show_on_global_gantt' === customFields[j].name && customFields[j].value) {\n                shouldBeShownInGlobalGantt = true;\n              }\n            }\n            if (!shouldBeShownInGlobalGantt) {\n              continue;\n            }\n            projects.push(_.pick(filteredProjects[i], 'id', 'name'));\n          }\n        }\n\n        if (response.length && page < maxPage) {\n          getProjectsPage(page+1);\n        } else {\n          deferred.resolve(projects);\n        }\n      });\n    }\n\n    try {\n      getProjectsPage(0);\n    } catch(e) {\n      console.error(e);\n    }\n\n    return deferred.promise;\n  }\n\n\n  return {\n    getAllProjects: getAllProjects\n  };\n})\n","'use strict';\n\ngbGantt.factory('User', function(Restangular, $http, RedmineBaseUrl) {\n\t\tvar getHeaders = function(credentials) {\n\t\t\treturn {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': 'Basic '+btoa(credentials.username+':'+credentials.password)\n\t\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tlogin: function(credentials) {\n\t\t\t\t/*return Restangular.one('users').customGET('current', {}, getHeaders(credentials)).then(function(resp) {\n\t\t\t\t\tconsole.log('response', resp);\n\t\t\t\t});*/\n\t\t\t\treturn $http.get(RedmineBaseUrl + '/users/current.json', { 'headers': getHeaders(credentials) });\n\t\t\t},\n\n\t\t\tsetUser: function(user){\n                localStorage.user = JSON.stringify(user);\n\t\t\t},\n\n\t\t\tgetUser: function(){\n                try {\n\t\t\t\t    return localStorage.user ? JSON.parse(localStorage.user) : null;\n                } catch(e) {\n                    return null;\n                }\n\t\t\t},\n\n\t\t\tapiKey: function(){\n\t\t\t\treturn this.getUser() ? this.getUser().api_key : null;\n\t\t\t},\n\n\t\t\tisLoggedIn: function(){\n\t\t\t\treturn null !== this.getUser();\n\t\t\t},\n\n\t\t\tlogOut: function(){\n\t\t\t\tlocalStorage.user = '';\n\t\t\t}\n\t\t}\n\t});\n"],"sourceRoot":"/source/"}