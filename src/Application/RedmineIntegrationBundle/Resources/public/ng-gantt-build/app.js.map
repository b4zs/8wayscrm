{"version":3,"sources":["app/scripts/angular-gantt-condensedgroups-plugin.js","app/scripts/app.js","app/scripts/controllers/condensed-gantt.js","app/scripts/controllers/gantt-tree-node-toggle.js","app/scripts/controllers/login.js","app/scripts/controllers/project-gantt.js","app/scripts/controllers/projects.js","app/scripts/directives/contextmenu.js","app/scripts/directives/inview.js","app/scripts/services/prepare-issues.js","app/scripts/services/user.js","app/scripts/taskGroup.factory.js"],"names":[],"mappingspjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnfile":"public/app.js","sourcesContent":["/*\nProject: angular-gantt v1.2.10 - Gantt chart component for AngularJS\nAuthors: Marco Schweighauser, RÃ©mi Alvergnat\nLicense: MIT\nHomepage: https://www.angular-gantt.com\nGithub: https://github.com/angular-gantt/angular-gantt.git\n*/\n(function(){\n    'use strict';\n    angular.module('gantt.condensedgroups', ['gantt', 'gantt.condensedgroups.templates']).directive('ganttCondensedGroups', ['ganttUtils', 'GanttHierarchy', '$compile', '$document', function(utils, Hierarchy, $compile, $document) {\n        return {\n            restrict: 'E',\n            require: '^gantt',\n            scope: {\n                enabled: '=?',\n                display: '=?'\n            },\n            link: function(scope, element, attrs, ganttCtrl) {\n                var api = ganttCtrl.gantt.api;\n\n                // Load options from global options attribute.\n                if (scope.options && typeof(scope.options.sortable) === 'object') {\n                    for (var option in scope.options.sortable) {\n                        scope[option] = scope.options[option];\n                    }\n                }\n\n                if (scope.enabled === undefined) {\n                    scope.enabled = true;\n                }\n\n                if (scope.display === undefined) {\n                    scope.display = 'group';\n                }\n\n                scope.hierarchy = new Hierarchy();\n\n                function refresh() {\n                    scope.hierarchy.refresh(ganttCtrl.gantt.rowsManager.filteredRows);\n                }\n\n                ganttCtrl.gantt.api.registerMethod('condensedgroups', 'refresh', refresh, this);\n                ganttCtrl.gantt.$scope.$watchCollection('gantt.rowsManager.filteredRows', function() {\n                    refresh();\n                });\n\n                api.directives.on.new(scope, function(directiveName, rowScope, rowElement) {\n                    if (directiveName === 'ganttRow') {\n                        if (! (rowScope.row.model.condensedGroups instanceof Array)) return;\n\n                        var lifecycleGroupScope = rowScope.$new();\n                        lifecycleGroupScope.pluginScope = scope;\n\n                        var ifElement = $document[0].createElement('div');\n                        angular.element(ifElement).attr('data-ng-if', 'pluginScope.enabled');\n\n                        var lifecycleGroupElement = $document[0].createElement('gantt-condensed-task-group');\n                        if (attrs.templateUrl !== undefined) {\n                            angular.element(lifecycleGroupElement).attr('data-template-url', attrs.templateUrl);\n                        }\n                        if (attrs.template !== undefined) {\n                            angular.element(lifecycleGroupElement).attr('data-template', attrs.template);\n                        }\n\n                        angular.element(ifElement).append(lifecycleGroupElement);\n\n                        rowElement.append($compile(ifElement)(lifecycleGroupScope));\n                    }\n                });\n            }\n        };\n    }]);\n}());\n\n\n(function(){\n    'use strict';\n    angular.module('gantt.condensedgroups').controller('GanttCondensedGroupController', ['$scope', 'GanttCondensedGroups', 'ganttUtils', function($scope, CondensedGroups, utils) {\n        var updateCondensedTaskGroup = function() {\n            var lifecycleGroups = $scope.row.model.condensedGroups;\n\n            var enabledValue = utils.firstProperty([lifecycleGroups], 'enabled', $scope.pluginScope.enabled);\n            if (enabledValue) {\n                $scope.display = utils.firstProperty([lifecycleGroups], 'display', $scope.pluginScope.display);\n                var c = new CondensedGroups($scope.row, $scope.pluginScope);\n                $scope.taskGroups = c.groups;\n\n                //$scope.row.setFromTo();\n                // TODO?: Ã¡tÃ­rja a row-ba a taskGroup alapjÃ¡n a kezdeti Ã©s vÃ©gdÃ¡tumokat\n                //$scope.row.setFromToByValues($scope.taskGroup.from, $scope.taskGroup.to);\n            } else {\n                $scope.taskGroups = undefined;\n                $scope.display = undefined;\n            }\n        };\n\n        // TODO check\n        $scope.gantt.api.tasks.on.viewChange($scope, function(task) {\n            if ($scope.taskGroup !== undefined) {\n                if ($scope.taskGroup.tasks.indexOf(task) > -1) {\n                    updateCondensedTaskGroup();\n                    if(!$scope.$$phase) {\n                        $scope.$digest();\n                    }\n                } else {\n                    var descendants = $scope.pluginScope.hierarchy.descendants($scope.row);\n                    if (descendants.indexOf(task.row) > -1) {\n                        updateCondensedTaskGroup();\n                        if(!$scope.$$phase) {\n                            $scope.$digest();\n                        }\n                    }\n                }\n            }\n        });\n\n        $scope.isActive = function(taskGroup) {\n          return taskGroup.from <= $scope.gantt.currentDateManager.date &&\n                 $scope.gantt.currentDateManager.date < taskGroup.to;\n        };\n\n        $scope.currentDateTooltipText = (function() {\n          var details = $scope.row.model.details;\n          var issuesInProgress = _.chain(details.issuesInProgress)\n                                  .map(function(issue) { return issue.subject+\" assignee: \"+issue.assignee+\"\\n\"; })\n                                  .reduce(function(a,b) { return a + b; })\n                                  .value();\n          return \"Project manager: \"+details.projectManager+'\\n'+\n                 \"Reported status: \"+details.reportedStatus+'\\n'+\n                 \"Issues in progress:\\n\"+ issuesInProgress\n        })();\n\n        var removeWatch = $scope.pluginScope.$watch('display', updateCondensedTaskGroup);\n\n        $scope.$watchCollection('gantt.rowsManager.filteredRows', updateCondensedTaskGroup);\n\n        $scope.gantt.api.columns.on.refresh($scope, updateCondensedTaskGroup);\n\n        $scope.$on('$destroy', removeWatch);\n    }]);\n}());\n\n\n(function(){\n    'use strict';\n    angular.module('gantt.condensedgroups').directive('ganttCondensedTaskGroup', ['GanttDirectiveBuilder', function(Builder) {\n        var builder = new Builder('ganttCondensedTaskGroup', 'plugins/groups/condensedTaskGroup.tmpl.html');\n        return builder.build();\n    }]);\n}());\n\n\n(function(){\n    'use strict';\n\n    angular.module('gantt').factory('GanttCondensedGroups', ['ganttUtils', function(utils) {\n        var CondensedGroups = function (row, pluginScope) {\n            var self = this;\n\n            self.row = row;\n            self.pluginScope = pluginScope;\n            self.groups = [];\n            self.showGrouping = false;\n\n            var lifecycleGroups = self.row.model.condensedGroups;\n            if (lifecycleGroups.length > 0) {\n                self.showGrouping = true;\n                angular.forEach(lifecycleGroups, function(lifecycleGroup) {\n                    var left = row.rowsManager.gantt.getPositionByDate(lifecycleGroup.from);\n                    var width = row.rowsManager.gantt.getPositionByDate(lifecycleGroup.to) - left;\n\n                    self.groups.push({\n                      left: left,\n                      width: width,\n                      name: lifecycleGroup.name,\n                      inProgress: lifecycleGroup.in_progress,\n                      parentName: row.model.name\n                    });\n                });\n            }\n        };\n        return CondensedGroups;\n    }]);\n}());\n\nangular.module('gantt.condensedgroups.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('plugins/groups/condensedTaskGroup.tmpl.html',\n        '<div ng-controller=\"GanttCondensedGroupController\">\\n' +\n        '    <div class=\"gantt-task-group\"\\n' +\n        '         ng-class=\"\\'gantt-lifecycle-\\' + taskGroup.name.substr(0,1)\"\\n' +\n        '         ng-attr-title=\"{{taskGroup.name}}\"\\n' +\n        '         ng-style=\"{\\'left\\': taskGroup.left + \\'px\\', \\'width\\': taskGroup.width + \\'px\\'}\"\\n' +\n        '         ng-repeat=\"taskGroup in taskGroups\">\\n' +\n        '        <div ng-if=\"isActive(row.model.condensedGroups[$index])\" ng-style=\"{ \\'left\\': gantt.currentDateManager.position - taskGroup.left - 6 + \\'px\\' }\" ng-attr-title=\"{{currentDateTooltipText}}\" class=\"gantt-task-group-current-date\"></div>' +\n        '        <div class=\"gantt-task-group-left-main\"></div>\\n' +\n        '        <div class=\"gantt-task-group-right-main\"></div>\\n' +\n        '        <div class=\"gantt-task-group-left-symbol\"></div>\\n' +\n        '        <div class=\"gantt-task-group-right-symbol\"></div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '\\n' +\n        '');\n}]);\n\n//# sourceMappingURL=angular-gantt-condensedgroups-plugin.js.map\n","'use strict';\n\n/**\n * @ngdoc overview\n * @name ng-gantt\n * @description\n * # ng-gantt\n *\n * Main module of the application.\n */\n\nangular.module('ng-gantt', [\n    'restangular',\n    'ui.router',\n    'gantt',\n    'gantt.tree',\n    'gantt.tooltips',\n    'gantt.groups',\n    'gantt.progress',\n    'gantt.dependencies',\n    'gantt.condensedgroups'\n])\n\n.constant('RedmineBaseUrl', 'http://redmine.assist01.gbart.h3.hu')\n\n// Configurations\n.config(function ($stateProvider, RestangularProvider, RedmineBaseUrl) {\n\n  // States\n  $stateProvider\n    .state('login', {\n      url: \"/login\",\n      templateUrl: 'views/login.html',\n      controller: 'LoginCtrl'\n    })\n\n    .state('projects', {\n      url: \"/projects\",\n      templateUrl: 'views/projects.html',\n      controller: 'ProjectsCtrl'\n    })\n\n    .state('projectgantt', {\n      url: \"/project/:projectId/gantt\",\n      templateUrl: 'views/project-gantt.html',\n      controller: 'ProjectGanttCtrl'\n      /*\n      resolve: {\n        apiKey: function($window) {\n          var apiKey = $window.sessionStorage.getItem('apiKey')\n          if (apiKey === null) {\n            apiKey = $window.prompt('redmine api key please');\n            $window.sessionStorage.setItem('apiKey', apiKey);\n          }\n          return apiKey;\n        }\n      }*/\n    })\n\n    .state('condensedgantt', {\n      url: \"/project/:projectId/condensedgantt\",\n      templateUrl: 'views/condensed-gantt.html',\n      controller: 'CondensedGanttCtrl'\n    });\n\n\n  RestangularProvider.setBaseUrl(RedmineBaseUrl);\n  RestangularProvider.setRequestSuffix('.json');\n  RestangularProvider.addResponseInterceptor(function(data, operation, what, url, response, deferred) {\n    var extractedData;\n    // .. to look for getList operations\n    if (operation === \"getList\") {\n      // .. and handle the data and meta data\n      extractedData = data[what];\n      extractedData.meta = {totalcount: data.totalcount, offset: data.offset, limit: data.limit};\n    } else {\n      extractedData = data.data;\n    }\n    return extractedData;\n  });\n})\n.constant('_', window._)\n.run(function(User, Restangular, $state, $templateCache) {\n\n  angular.module('ui.tree').config(function(treeConfig) {\n    treeConfig.defaultCollapsed = true;\n  });\n\n  // TODO: remove hack, need to override template\n  /*\n  $templateCache.put('plugins/tree/treeBodyChildrenOriginal.tmpl.html',\n    '<div ng-controller=\"GanttTreeNodeController\"\\n' +\n    '     class=\"gantt-row-label gantt-row-height\"\\n' +\n    '     ng-class=\"row.model.classes\"\\n' +\n    '     ng-style=\"{\\'height\\': row.model.height}\">\\n' +\n    '  <div class=\"gantt-valign-container\">\\n' +\n    '    <div class=\"gantt-valign-content\">\\n' +\n    '      <a ng-disabled=\"isCollapseDisabled()\" data-nodrag\\n' +\n    '         class=\"gantt-tree-handle-button btn btn-xs\"\\n' +\n    '         ng-class=\"{\\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"\\n' +\n    '         ng-click=\"!isCollapseDisabled() && toggle()\"><span\\n' +\n    '         class=\"gantt-tree-handle glyphicon glyphicon-chevron-down\"\\n' +\n    '         ng-class=\"{\\n' +\n    '         \\'glyphicon-chevron-right\\': collapsed, \\'glyphicon-chevron-down\\': !collapsed,\\n' +\n    '         \\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"></span>\\n' +\n    '      </a>\\n' +\n    '      <span gantt-row-label class=\"gantt-label-text\" gantt-bind-compile-html=\"getRowContent()\"/>\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '</div>\\n' +\n    '<ol ui-tree-nodes ng-class=\"{hidden: collapsed}\" ng-model=\"childrenRows\">\\n' +\n    '  <li ng-repeat=\"row in childrenRows\" ui-tree-node>\\n' +\n    '    <div ng-include=\"\\'plugins/tree/treeBodyChildrenOriginal.tmpl.html\\'\"></div>\\n' +\n    '  </li>\\n' +\n    '</ol>');*/\n\n  $templateCache.put('plugins/tree/treeBodyChildren.tmpl.html',\n    '<div ng-controller=\"GanttTreeNodeController\"\\n' +\n    '     class=\"gantt-row-label gantt-row-height\"\\n' +\n    '     ng-class=\"row.model.classes\"\\n' +\n    '     ng-style=\"{\\'height\\': row.model.height}\">\\n' +\n    '<div class=\"gantt-valign-container\">\\n' +\n    '<div class=\"gantt-valign-content\">\\n' +\n    '<a ng-disabled=\"isCollapseDisabledOnNode()\" ng-controller=\"GanttTreeNodeToggleController\" data-nodrag\\n' +\n    '   class=\"gantt-tree-handle-button btn btn-xs\"\\n' +\n    '   ng-class=\"{\\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"\\n' +\n    '   ng-click=\"toggleNode()\"><span\\n' +\n    '   class=\"gantt-tree-handle glyphicon\"\\n' +\n    '   ng-class=\"{\\n' +\n    '   \\'glyphicon-chevron-right\\': collapsed, \\'glyphicon-chevron-down\\': !collapsed,\\n' +\n    '   \\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"></span>\\n' +\n    '</a>\\n' +\n    '<span gantt-row-label class=\"gantt-label-text\" gantt-bind-compile-html=\"getRowContent()\"/>\\n' +\n    '</div>\\n' +\n    '</div>\\n' +\n    '</div>\\n' +\n    '<ol ui-tree-nodes ng-class=\"{hidden: collapsed}\" ng-model=\"childrenRows\">\\n' +\n    '  <li ng-repeat=\"row in childrenRows\" ui-tree-node collapsed=\"true\">\\n' +\n    '    <div ng-include=\"\\'plugins/tree/treeBodyChildren.tmpl.html\\'\"></div>\\n' +\n    '  </li>\\n' +\n    '</ol>');\n\n  if (User.getUser()) {\n    Restangular.setDefaultRequestParams({ key: User.apiKey() });\n    $state.go('projects');\n  } else\n    $state.go('login');\n});\n","'use strict';\n\n/**\n * @ngdoc function\n * @name ng-gantt.controller:CondensedGanttCtrl\n * @description\n * # CondensedGanttCtrl\n * Controller of the condensed gantt\n */\nangular.module('ng-gantt')\n  .controller('CondensedGanttCtrl', function ($scope, Restangular, $stateParams, RedmineBaseUrl, $compile, moment, _, PrepareIssues, $timeout, $window) {\n\n    var destroyOpenProjectListener = $scope.$on('openProject', function(e, projectRowScope) {\n      var projectId = projectRowScope.row.model.id;\n      var projectParent = projectRowScope.row.model.parent;\n      Restangular.all('issues').getList({ project_id: projectId, limit: 100, include: 'relations' }).then(\n        function(issues) {\n          if (projectParent) $scope.$broadcast('projectOpened', projectId);\n\n          var newRows = PrepareIssues(issues, projectId);\n          var filteredRows = _.filter($scope.data, function(ganttRow) {\n            // never get rid of the 'project rows'\n            // TODO: mark the project rows explicitly\n            if (ganttRow.hasOwnProperty('parent')) return true;\n\n            // keep the rows under the opened project\n            //console.log('keeping row: ', ganttRow.projectId == projectId);\n            return ganttRow.projectId == projectId;\n          });\n          $scope.data = filteredRows.concat(newRows);\n          $scope.openedProject = projectId;\n\n          console.log(\"(open) now toggle\", projectId);\n          projectRowScope.toggle();\n\n          $timeout(function() {\n            $scope.api.side.setWidth(undefined);\n          }, 0);\n        });\n    });\n\n    var destroyCloseProjectListener = $scope.$on('closeProject', function (e, projectRowScope) {\n      var projectId = projectRowScope.row.model.id;\n      $scope.data = _.filter($scope.data, function(ganttRow) {\n        // TODO: mark the project rows explicitly\n        if (ganttRow.hasOwnProperty('parent')) return true;\n\n        return ganttRow.projectId != projectId;\n      });\n\n      console.log(\"(close) now toggle\", projectId);\n      projectRowScope.toggle();\n    });\n\n    $scope.$on('destroy', function() {\n      destroyOpenProjectListener();\n      destroyCloseProjectListener();\n    });\n\n    $scope.filter = {\n      row: \"\",\n      category: \"\"\n    };\n\n    $scope.filterRow = function ($event) {\n      if ($event.which === 13) {\n        applyFilters();\n      }\n    };\n\n    $scope.filterCategory = function() { applyFilters(); };\n\n    var applyFilters = function() {\n      $scope.api.rows.refresh();\n      $scope.toggleMenu();\n    };\n\n    $scope.filterRowFunc = function (row) {\n      var rowValue = $scope.filter.row;\n      var categoryValue = $scope.filter.category;\n      var rowVisibleByRowFilter = true;\n      var rowVisibleByCategoryFilter = true;\n\n      // do not hide the opened project's rows\n      if (row.model.projectId == $scope.openedProject) {\n        rowVisibleByRowFilter = true;\n      } else if (rowValue !== undefined && rowValue != '') {\n        rowVisibleByRowFilter = row.model.name.indexOf(rowValue) > -1;\n      }\n\n      if (categoryValue !== undefined && categoryValue != '') {\n        if (row.model.condensedGroups === undefined) {\n          //console.log('hiding row', row.model.name);\n          rowVisibleByCategoryFilter = true;\n        } else {\n          rowVisibleByCategoryFilter =\n            _.chain(row.model.condensedGroups)\n              .map(function (group) {\n                return $scope.isActiveLifecycleCategory(group) && group.name.substr(0, 1) == categoryValue\n              })\n              .any()\n              .value();\n        }\n      }\n\n      //console.log('row: ', rowVisibleByRowFilter, ', category: ', rowVisibleByCategoryFilter);\n      return rowVisibleByRowFilter && rowVisibleByCategoryFilter;\n    };\n\n    // TODO: remove duplicated logic (see condensedgroups plugin)\n    $scope.isActiveLifecycleCategory = function(lifecycleCategory) {\n      return lifecycleCategory.from <= $scope.api.gantt.currentDateManager.date &&\n        $scope.api.gantt.currentDateManager.date < lifecycleCategory.to;\n    };\n\n    $scope.showMenu = false;\n    $scope.toggleMenu = function() { $scope.showMenu = !$scope.showMenu };\n\n    // TODO: causes flicker when opening a project\n    $scope.maxHeight = function() {\n      return $window.innerHeight;\n    };\n\n    $scope.options = {\n      timeFrames: {\n        'day': {\n          start: moment('10:00', 'HH:mm'),\n          end: moment('18:00', 'HH:mm'),\n          working: true,\n          default: true\n        },\n        'weekend': {\n          working: false\n        }\n      },\n      dateFrames: {\n        'weekend': {\n          evaluator: function(date) {\n            return date.isoWeekday() === 6 || date.isoWeekday() === 7;\n          },\n          targets: ['weekend']\n        }\n      },\n      rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\n      taskContent : '<i class=\"fa fa-tasks\"></i> <a href=\"'+RedmineBaseUrl+'/issues/{{task.model.id}}\" target=\"_blank\">{{task.model.name}}</a>',\n      columnWidth: 18,\n      currentDate: 'line',\n      currentDateValue: new Date(2015, 5, 12)//, 9, 0, 0)\n    };\n\n    $scope.registerApi = function(api) {\n      $scope.api = api;\n\n      api.core.on.ready($scope, function(api) {\n        api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n          if (dName === 'ganttTaskContent') {\n            dElement.attr('inview', '');\n            $compile(dElement)(dScope);\n          }\n        });\n\n        Restangular.one('ganttprojects', $stateParams.projectId).getList().then(function(projects) {\n          projectsLoaded(projects);\n\n          // collapse this way or need to override another tree tmpl..\n          $timeout(function() {\n            $scope.api.tree.collapseAll();\n\n            $scope.api.side.setWidth(undefined);\n            $scope.readyToShow = true;\n          }, 0);\n        });\n      });\n    };\n\n    function projectsLoaded(projects) {\n      //console.log(projects);\n      var data = [];\n\n      _.each(projects, function(project) {\n        var condensedProjectRow = {\n          id: project.id,\n          name: project.name || \"project \" + project.id,\n          groups: false,\n          classes: ['gantt-row-lifecycle'],\n          parent: project.parent_id,\n          details: {\n            projectManager: project.project_manager || '-',\n            reportedStatus: project.reported_status,\n            issuesInProgress: project.in_progress_issues\n          }\n        };\n\n        if (_.isEmpty(project.lifecycle_categories)) {\n          var childProjects = _.where(projects, { 'parent_id': project.id });\n          var projectStartDate = _.min(childProjects, function(cp) { return new Date(cp.start_date) }).start_date;\n          var projectDueDate = _.max(childProjects, function(cp) { return new Date(cp.due_date) }).due_date;\n\n          // TODO\n          $scope.options.fromDate = projectStartDate;\n          $scope.options.toDate = projectDueDate;\n\n          condensedProjectRow.groups = { enabled: true, display: 'group', from: moment(projectStartDate), to: moment(projectDueDate) };\n        } else {\n          condensedProjectRow.condensedGroups = [];\n\n          _.each(_.sortBy(project.lifecycle_categories, function (x) {\n            return x.name\n          }), function (lifecycleCategory) {\n            var lifecycleGroup = {\n              from: moment(lifecycleCategory.start_date),\n              to: moment(lifecycleCategory.due_date),\n              name: lifecycleCategory.name,\n              in_progress: lifecycleCategory.in_progress\n            };\n\n            condensedProjectRow.condensedGroups.push(lifecycleGroup);\n          });\n        }\n        data.push(condensedProjectRow);\n      });\n\n      $scope.data = data;\n    }\n  });\n","'use strict';\n\nangular.module('ng-gantt')\n  .controller('GanttTreeNodeToggleController', function($scope) {\n    $scope.toggleNode = function() {\n      if (isProjectRow()) {\n        toggleProject();\n      } else {\n        !$scope.isCollapseDisabled() && $scope.toggle();\n      }\n    };\n\n    $scope.isCollapseDisabledOnNode = function() {\n      if (isProjectRow()) {\n        return false;\n      } else {\n        return $scope.isCollapseDisabled();\n      }\n    };\n\n    $scope.$on(\"projectOpened\", function (e, projectId) {\n      if (!isProjectRow()) return;\n\n      if ($scope.row.model.parent && $scope.row.model.id != projectId) {\n        $scope.closeProject();\n      }\n    });\n\n    $scope.openProject = function () {\n      if (!$scope.collapsed) return;\n\n      console.log('clicked project', $scope.row.model.id);\n      $scope.$emit('openProject', $scope);\n      var idx = $scope.row.model.classes.indexOf('gantt-row-expanded');\n      if (idx == -1) $scope.row.model.classes.push('gantt-row-expanded');\n    };\n\n    $scope.closeProject = function () {\n      if ($scope.collapsed) return;\n\n      if ($scope.row.model.parent) {\n        $scope.$emit('closeProject', $scope);\n      } else {\n        $scope.toggle();\n      }\n      var idx = $scope.row.model.classes.indexOf('gantt-row-expanded');\n      if (idx > -1) $scope.row.model.classes.splice(idx, 1);\n    };\n\n    var isProjectRow = function() {\n      return $scope.row.model.condensedGroups instanceof Array;\n    };\n\n    var toggleProject = function () {\n      $scope.collapsed ? $scope.openProject() : $scope.closeProject();\n    };\n  });\n","'use strict';\n\nangular.module('ng-gantt')\n  .controller('LoginCtrl', function ($scope, $window, $state, User, Restangular) {\n    $scope.login = function(credentials){\n        User.login(credentials)\n            .then(function(response){\n                var user = response.data.user;\n                User.setUser(user);\n                Restangular.setDefaultRequestParams({ key: user.api_key });\n                $state.go('projects');\n            }, function(){\n                $window.alert('Wrong username or password!');\n            });\n    };\n  });\n","'use strict';\n\n/**\n * @ngdoc function\n * @name ng-gantt.controller:ProjectGanttCtrl\n * @description\n * # ProjectGanttCtrl\n * Controller of the project gantt\n */\nangular.module('ng-gantt')\n.controller('ProjectGanttCtrl', function ($scope, Restangular, $stateParams, RedmineBaseUrl, $compile, moment, _, PrepareIssues) {\n    $scope.timeFrames = {\n        'day': {\n            start: moment('10:00', 'HH:mm'),\n            end: moment('18:00', 'HH:mm'),\n            working: true,\n            default: true\n        },\n        'weekend': {\n            working: false\n        }\n    };\n\n    $scope.dateFrames = {\n        'weekend': {\n            evaluator: function(date) {\n                return date.isoWeekday() === 6 || date.isoWeekday() === 7;\n            },\n            targets: ['weekend']\n        }\n    };\n\n    $scope.registerApi = function(api) {\n        $scope.api = api;\n\n        api.core.on.ready($scope, function(api) {\n            console.log('ready');\n            api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\n                if (dName === 'ganttTaskContent') {\n                    dElement.attr('inview', '');\n                    $compile(dElement)(dScope);\n                }\n            });\n\n            Restangular.all('issues').getList({ project_id: $stateParams.projectId, limit: 100, include: 'relations' })\n                .then(function(issues) {\n                    $scope.data = PrepareIssues(issues);\n                });\n        });\n    };\n\n    var contextMenuOptions = [\n            ['Context item 1', function (a) {\n\n            }],\n            null,\n            ['Context item 2', function (a) {\n\n            }],\n            null,\n            ['More...', [\n                ['Sub item 1', function ($itemScope) {\n\n                }],\n                null,\n                ['Sub item 2', function ($itemScope) {\n\n                }]\n            ]]\n    ];\n\n    $scope.options = {\n        contextMenuOptions: contextMenuOptions,\n        rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\n        taskContent : '<i class=\"fa fa-tasks\"></i> <span ng-context-menu=\"contextMenuOptions\"><a href=\"'+RedmineBaseUrl+'/issues/{{task.model.id}}\" target=\"_blank\">{{task.model.name}}</a></span>',\n    };\n});\n","'use strict';\n\nangular.module('ng-gantt')\n  .controller('ProjectsCtrl', function ($scope, Restangular, $state) {\n\t  var pageSize = 100;\n\t  var maxPage = 5;\n\t  $scope.projects = [{id: 484, name: 'Teszt projekt'}];\n\n\t  getProjectsPage(0);\n\n\t  $scope.showGantt = function(projectId) {\n\t\t  $state.go(\"projectgantt\", {projectId: projectId});\n\t  };\n\n    $scope.showCondensedGantt = function(projectId) {\n      $state.go(\"condensedgantt\", {projectId: projectId});\n    };\n\n\t  function getProjectsPage(page) {\n\t\tRestangular.all('projects').getList({limit: pageSize, offset: page * pageSize}).then(function(projects) {\n\t\t\tvar filteredProjects = _.where(projects, { parent: {name: \"8 Ways\"} });\n\t\t\t$scope.projects = $scope.projects.concat(_.map(filteredProjects, function(p) { return _.pick(p, 'id', 'name') }));\n\n\t\t\tif (++page < maxPage) getProjectsPage(page);\n\t\t});\n\t  }\n  });\n","'use strict';\n// borrowed from https://stackoverflow.com/questions/29764079/angularjs-creating-context-menu-with-submenu\nangular.module('ng-gantt')\n.directive('ngContextMenu', function ($parse) {\n    var buildMenuItem = function($scope, list, item) {\n        var $li = angular.element('<li>');\n        if (item === null) {\n            $li.addClass('divider');\n        } else if(item[1] instanceof Array) {\n            $li.addClass(\"dropdown-submenu\");\n            var $subMenu = angular.element('<ul class=\"dropdown-menu\">');\n            \n            item[1].forEach(function (subItem, x) {\n                buildMenuItem($scope, $subMenu, subItem);\n            });\n            \n            var $a = angular.element('<a>');\n            $a.text(item[0]);\n            $li.append($a);\n            $li.append($subMenu);\n        } else {\n            var $a = angular.element('<a>');\n            $a.attr({ tabindex: '-1', href: '#' });\n            $a.text(item[0]);\n            $li.append($a);\n            $li.on('click', function () {\n                $scope.$apply(function() {\n                    item[1].call($scope, $scope);\n                });\n            });\n        }\n        list.append($li);\n    };\n    \n    var renderContextMenu = function ($scope, event, options) {\n        angular.element(event.currentTarget).addClass('context');\n        var $contextMenu = angular.element('<div>');\n        $contextMenu.addClass('dropdown clearfix');\n        var $ul = angular.element('<ul>');\n        $ul.addClass('dropdown-menu');\n        $ul.attr({ 'role': 'menu' });\n        $ul.css({\n            display: 'block',\n            position: 'absolute',\n            left: event.pageX + 'px',\n            top: event.pageY + 'px'\n        });\n        angular.forEach(options, function (item, i) {\n            buildMenuItem($scope, $ul, item);\n        });\n        $contextMenu.append($ul);\n        $contextMenu.css({\n            width: '100%',\n            height: '100%',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            zIndex: 9999\n        });\n        angular.element(document).find('body').append($contextMenu);\n        $contextMenu.on(\"click\", function (e) {\n            angular.element(event.currentTarget).removeClass('context');\n            $contextMenu.remove();\n        }).on('contextmenu', function (event) {\n            angular.element(event.currentTarget).removeClass('context');\n            event.preventDefault();\n            $contextMenu.remove();\n        });\n    };\n    return function ($scope, element, attrs) {\n        element.on('contextmenu', function (event) {\n            $scope.$apply(function () {\n                event.preventDefault();\n                var options = $scope.$eval(attrs.ngContextMenu);\n                if (options instanceof Array) {\n                    renderContextMenu($scope, event, options);\n                } else {\n                    throw '\"' + attrs.ngContextMenu + '\" not an array';                    \n                }\n            });\n        });\n    };\n});\n","'use strict';\n\nangular.module('ng-gantt')\n.directive('inview', function ($document, $compile) {\n    var getViewPortWidth = function() {\n        var d = $document[0];\n        return d.documentElement.clientWidth || d.documentElement.getElementById('body')[0].clientWidth;\n    };\n    \n    return {\n        link: function(scope, element) {\n            scope.$watch(\n                function() {\n                    var clientRect = element[0].getClientRects()[0];\n                    return clientRect.right <= getViewPortWidth();\n                },\n                function(newInviewStatus, oldInviewStatus) {\n                    if (! newInviewStatus) {\n                        element[0].style.right = '100%';\n                        element[0].style.left = 'auto';\n                    }\n                }\n            );\n        }\n    }\n});\n","'use strict';\n\nangular.module('ng-gantt')\n  .factory('PrepareIssues', function() {\n    return function (issues, root) {\n      /* debug\n       console.log(issues);\n       _.each(issues, function (issue) {\n       var parentId = issue.parent ? issue.parent.id : null;\n       var lifecycleCategory = _.findWhere(issue.custom_fields, {name: 'Lifecycle category'}).value;\n\n       if (/^A/.test(lifecycleCategory))\n       console.log(issue.custom_fields[4], issue);\n       //console.log(issue.id, issue.subject, parentId, lifecycleCategory);\n       });*/\n\n      var data = [];\n      var issuesDependencies = getIssuesDependencies(issues);\n      var issuesByLifecycle = getIssuesByLifecycle(issues);\n\n      _.each(_.keys(issuesByLifecycle).sort(), function (lifecycle) {\n        var lifecycleRow = { id: lifecycle + root, name: lifecycle, groups: true, classes: 'gantt-row-lifecycle', projectId: root };\n        if (root) lifecycleRow.parent = root;\n\n        var sortedLifecycleChildIssues = _.sortBy(issuesByLifecycle[lifecycle], function (issue) {\n          return getCustomFieldValue(issue, 'Position');\n        });\n\n        _.each(sortedLifecycleChildIssues, function (issue) {\n          var parent = issue.parent ? _.findWhere(issues, {id: issue.parent.id}).subject : lifecycle + root;\n\n          var assigneeRole = getCustomFieldValue(issue, 'Assignee role');\n\n          var dependencies = getIssueDependencyParameters(issue, issuesDependencies);\n\n          var row =\n          {\n            id: issue.id,\n            name: issue.subject,\n            parent: parent,\n            projectId: root,\n            tasks: [\n              {\n                id: issue.id,\n                name: issue.subject,\n                from: issue.start_date,\n                to: issue.due_date,\n                type: issue.tracker.name,\n                status: issue.status.name,\n                priority: issue.priority.name,\n                assignee: { role: assigneeRole, fullname: issue.assigned_to.name },\n                progress: { percent: issue.done_ratio, classes: ['ng-gantt-progress'] },\n                classes: getAssigneeClass(assigneeRole),\n                dependencies: dependencies\n              }\n            ]\n          };\n\n          // don't show the group if its a sub-task\n          if (issue.parent) row.groups = false;\n          data.push(row);\n        });\n        data.push(lifecycleRow);\n      });\n\n      return data;\n    };\n\n    function getIssueDependencyParameters(issue, issuesDependencies) {\n      var issueDependencies = _.findWhere(issuesDependencies, {id: issue.id});\n      if (issueDependencies === undefined) return [];\n\n      return _.map(issueDependencies.dependencies, function(dependencyId) {\n        return { from: dependencyId };\n      });\n    }\n\n    function getIssuesDependencies(issues) {\n      var issuesDependencies = [];\n\n      _.each(issues, function (issue) {\n        if (issue.relations.length == 0) return;\n\n        _.where(issue.relations, { relation_type: 'precedes' })\n          .forEach(function(precedesRelation) {\n            var issueDependencies;\n            if (issueDependencies = _.findWhere(issuesDependencies, { id: precedesRelation.issue_to_id })) {\n              if (! _.contains(issueDependencies.dependencies, precedesRelation.issue_id))\n                issueDependencies.dependencies.push(precedesRelation.issue_id);\n            } else\n              issuesDependencies.push({ id: precedesRelation.issue_to_id, dependencies: [ precedesRelation.issue_id ] });\n          });\n      });\n\n      return issuesDependencies;\n    }\n\n    function getIssuesByLifecycle(issues) {\n      return _.groupBy(issues, function (issue) {\n        return getCustomFieldValue(issue, 'Lifecycle category', '');\n      });\n    }\n\n    function getCustomFieldValue(issue, name, defaultValue) {\n      var customFieldByName = _.findWhere(issue.custom_fields, {name: name});\n      if (customFieldByName === undefined) return defaultValue;\n\n      return customFieldByName.value;\n    }\n\n    function getAssigneeClass(assignee) {\n      switch (assignee) {\n        case 'Sales': return \"sales-task\";\n        case 'Team': return \"team-task\";\n        case 'PM': return \"pm-task\";\n        case 'Client': return \"client-task\";\n        case '':\n        case undefined: return '';\n        default: throw new Error('Unknown assignee ' + assignee);\n      }\n    }\n  });\n","'use strict';\n\nangular.module('ng-gantt')\n\t.factory('User', function(Restangular, $http, RedmineBaseUrl) {\n\t\tvar getHeaders = function(credentials) {\n\t\t\treturn {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': 'Basic '+btoa(credentials.username+':'+credentials.password)\n\t\t\t\t};\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tlogin: function(credentials) {\n\t\t\t\t/*return Restangular.one('users').customGET('current', {}, getHeaders(credentials)).then(function(resp) {\n\t\t\t\t\tconsole.log('response', resp);\n\t\t\t\t});*/\n\t\t\t\treturn $http.get(RedmineBaseUrl + '/users/current.json', { 'headers': getHeaders(credentials) });\n\t\t\t},\n\t\t\t\n\t\t\tsetUser: function(user){\n                localStorage.user = JSON.stringify(user);\n\t\t\t},\n\t\t\t\n\t\t\tgetUser: function(){\n                try {\n\t\t\t\t    return localStorage.user ? JSON.parse(localStorage.user) : null;\n                } catch(e) {\n                    return null;\n                }\n\t\t\t},\n\t\t\t\n\t\t\tapiKey: function(){\n\t\t\t\treturn this.getUser() ? this.getUser().api_key : null;\n\t\t\t},\n\t\t\t\n\t\t\tisLoggedIn: function(){\n\t\t\t\treturn null !== this.getUser();\n\t\t\t},\n\t\t\t \n\t\t\tlogOut: function(){\n\t\t\t\tlocalStorage.user = '';\n\t\t\t}\n\t\t}\n\t});","(function(){\n    'use strict';\n\n    angular.module('gantt').factory('GanttTaskGroup', ['ganttUtils', 'GanttTask', function(utils, Task) {\n        var TaskGroup = function (row, pluginScope) {\n            var self = this;\n\n            self.row = row;\n            self.pluginScope = pluginScope;\n\n            self.descendants = self.pluginScope.hierarchy.descendants(self.row);\n\n            self.tasks = [];\n            self.overviewTasks = [];\n            self.promotedTasks = [];\n            self.showGrouping = false;\n\n            var groupRowGroups = self.row.model.groups;\n            if (typeof(groupRowGroups) === 'boolean') {\n                groupRowGroups = {enabled: groupRowGroups};\n            }\n\n            var getTaskDisplay = function(task) {\n                var taskGroups = task.model.groups;\n                if (typeof(taskGroups) === 'boolean') {\n                    taskGroups = {enabled: taskGroups};\n                }\n\n                var rowGroups = task.row.model.groups;\n                if (typeof(rowGroups) === 'boolean') {\n                    rowGroups = {enabled: rowGroups};\n                }\n\n                var enabledValue = utils.firstProperty([taskGroups, rowGroups, groupRowGroups], 'enabled', self.pluginScope.enabled);\n\n                if (enabledValue) {\n                    var display = utils.firstProperty([taskGroups, rowGroups, groupRowGroups], 'display', self.pluginScope.display);\n                    return display;\n                }\n            };\n\n            angular.forEach(self.descendants, function(descendant) {\n                angular.forEach(descendant.tasks, function(task) {\n                    var taskDisplay = getTaskDisplay(task);\n                    if (taskDisplay !== undefined) {\n                        self.tasks.push(task);\n                        var clone = new Task(self.row, task.model);\n\n                        if (taskDisplay === 'overview') {\n                            self.overviewTasks.push(clone);\n                        } else if(taskDisplay === 'promote'){\n                            self.promotedTasks.push(clone);\n                        } else {\n                            self.showGrouping = true;\n                        }\n                    }\n                });\n            });\n\n            self.from = undefined;\n            if (groupRowGroups) {\n                self.from = groupRowGroups.from;\n            }\n            if (self.from === undefined) {\n                angular.forEach(self.tasks, function (task) {\n                    if (self.from === undefined || task.model.from < self.from) {\n                        self.from = task.model.from;\n                    }\n                });\n            }\n\n            self.to = undefined;\n            if (groupRowGroups) {\n                self.to = groupRowGroups.to;\n            }\n            if (self.to === undefined) {\n                angular.forEach(self.tasks, function (task) {\n                    if (self.to === undefined || task.model.to > self.to) {\n                        self.to = task.model.to;\n                    }\n                });\n            }\n\n            if (self.from && self.to) self.showGrouping = true;\n\n            if (self.showGrouping) {\n                self.left = row.rowsManager.gantt.getPositionByDate(self.from);\n                self.width = row.rowsManager.gantt.getPositionByDate(self.to) - self.left;\n            }\n        };\n        return TaskGroup;\n    }]);\n}());\n"]}