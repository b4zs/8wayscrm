{"version":3,"sources":["app/scripts/angular-gantt-condensedgroups-plugin.js","app/scripts/app.js","app/scripts/controllers/condensed-gantt.js","app/scripts/controllers/gantt-tree-node-toggle.js","app/scripts/controllers/login.js","app/scripts/controllers/project-gantt.js","app/scripts/controllers/projects.js","app/scripts/directives/contextmenu.js","app/scripts/directives/inview.js","app/scripts/services/prepare-issues.js","app/scripts/services/user.js","app/scripts/taskGroup.factory.js"],"names":[],"mappingsntSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnfile":"public\\app.js","sourcesContent":["/*\r\nProject: angular-gantt v1.2.10 - Gantt chart component for AngularJS\r\nAuthors: Marco Schweighauser, RÃ©mi Alvergnat\r\nLicense: MIT\r\nHomepage: https://www.angular-gantt.com\r\nGithub: https://github.com/angular-gantt/angular-gantt.git\r\n*/\r\n(function(){\r\n    'use strict';\r\n    angular.module('gantt.condensedgroups', ['gantt', 'gantt.condensedgroups.templates']).directive('ganttCondensedGroups', ['ganttUtils', 'GanttHierarchy', '$compile', '$document', function(utils, Hierarchy, $compile, $document) {\r\n        return {\r\n            restrict: 'E',\r\n            require: '^gantt',\r\n            scope: {\r\n                enabled: '=?',\r\n                display: '=?'\r\n            },\r\n            link: function(scope, element, attrs, ganttCtrl) {\r\n                var api = ganttCtrl.gantt.api;\r\n\r\n                // Load options from global options attribute.\r\n                if (scope.options && typeof(scope.options.sortable) === 'object') {\r\n                    for (var option in scope.options.sortable) {\r\n                        scope[option] = scope.options[option];\r\n                    }\r\n                }\r\n\r\n                if (scope.enabled === undefined) {\r\n                    scope.enabled = true;\r\n                }\r\n\r\n                if (scope.display === undefined) {\r\n                    scope.display = 'group';\r\n                }\r\n\r\n                scope.hierarchy = new Hierarchy();\r\n\r\n                function refresh() {\r\n                    scope.hierarchy.refresh(ganttCtrl.gantt.rowsManager.filteredRows);\r\n                }\r\n\r\n                ganttCtrl.gantt.api.registerMethod('condensedgroups', 'refresh', refresh, this);\r\n                ganttCtrl.gantt.$scope.$watchCollection('gantt.rowsManager.filteredRows', function() {\r\n                    refresh();\r\n                });\r\n\r\n                api.directives.on.new(scope, function(directiveName, rowScope, rowElement) {\r\n                    if (directiveName === 'ganttRow') {\r\n                        if (! (rowScope.row.model.condensedGroups instanceof Array)) return;\r\n\r\n                        var lifecycleGroupScope = rowScope.$new();\r\n                        lifecycleGroupScope.pluginScope = scope;\r\n\r\n                        var ifElement = $document[0].createElement('div');\r\n                        angular.element(ifElement).attr('data-ng-if', 'pluginScope.enabled');\r\n\r\n                        var lifecycleGroupElement = $document[0].createElement('gantt-condensed-task-group');\r\n                        if (attrs.templateUrl !== undefined) {\r\n                            angular.element(lifecycleGroupElement).attr('data-template-url', attrs.templateUrl);\r\n                        }\r\n                        if (attrs.template !== undefined) {\r\n                            angular.element(lifecycleGroupElement).attr('data-template', attrs.template);\r\n                        }\r\n\r\n                        angular.element(ifElement).append(lifecycleGroupElement);\r\n\r\n                        rowElement.append($compile(ifElement)(lifecycleGroupScope));\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('gantt.condensedgroups').controller('GanttCondensedGroupController', ['$scope', 'GanttCondensedGroups', 'ganttUtils', function($scope, CondensedGroups, utils) {\r\n        var updateCondensedTaskGroup = function() {\r\n            var lifecycleGroups = $scope.row.model.condensedGroups;\r\n\r\n            var enabledValue = utils.firstProperty([lifecycleGroups], 'enabled', $scope.pluginScope.enabled);\r\n            if (enabledValue) {\r\n                $scope.display = utils.firstProperty([lifecycleGroups], 'display', $scope.pluginScope.display);\r\n                var c = new CondensedGroups($scope.row, $scope.pluginScope);\r\n                $scope.taskGroups = c.groups;\r\n\r\n                //$scope.row.setFromTo();\r\n                // TODO?: Ã¡tÃ­rja a row-ba a taskGroup alapjÃ¡n a kezdeti Ã©s vÃ©gdÃ¡tumokat\r\n                //$scope.row.setFromToByValues($scope.taskGroup.from, $scope.taskGroup.to);\r\n            } else {\r\n                $scope.taskGroups = undefined;\r\n                $scope.display = undefined;\r\n            }\r\n        };\r\n\r\n        // TODO check\r\n        $scope.gantt.api.tasks.on.viewChange($scope, function(task) {\r\n            if ($scope.taskGroup !== undefined) {\r\n                if ($scope.taskGroup.tasks.indexOf(task) > -1) {\r\n                    updateCondensedTaskGroup();\r\n                    if(!$scope.$$phase) {\r\n                        $scope.$digest();\r\n                    }\r\n                } else {\r\n                    var descendants = $scope.pluginScope.hierarchy.descendants($scope.row);\r\n                    if (descendants.indexOf(task.row) > -1) {\r\n                        updateCondensedTaskGroup();\r\n                        if(!$scope.$$phase) {\r\n                            $scope.$digest();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.isActive = function(taskGroup) {\r\n          return taskGroup.from <= $scope.gantt.currentDateManager.date &&\r\n                 $scope.gantt.currentDateManager.date < taskGroup.to;\r\n        };\r\n\r\n        $scope.currentDateTooltipText = (function() {\r\n          var details = $scope.row.model.details;\r\n          var issuesInProgress = _.chain(details.issuesInProgress)\r\n                                  .map(function(issue) { return issue.subject+\" assignee: \"+issue.assignee+\"\\n\"; })\r\n                                  .reduce(function(a,b) { return a + b; })\r\n                                  .value();\r\n          return \"Project manager: \"+details.projectManager+'\\n'+\r\n                 \"Reported status: \"+details.reportedStatus+'\\n'+\r\n                 \"Issues in progress:\\n\"+ issuesInProgress\r\n        })();\r\n\r\n        var removeWatch = $scope.pluginScope.$watch('display', updateCondensedTaskGroup);\r\n\r\n        $scope.$watchCollection('gantt.rowsManager.filteredRows', updateCondensedTaskGroup);\r\n\r\n        $scope.gantt.api.columns.on.refresh($scope, updateCondensedTaskGroup);\r\n\r\n        $scope.$on('$destroy', removeWatch);\r\n    }]);\r\n}());\r\n\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('gantt.condensedgroups').directive('ganttCondensedTaskGroup', ['GanttDirectiveBuilder', function(Builder) {\r\n        var builder = new Builder('ganttCondensedTaskGroup', 'plugins/groups/condensedTaskGroup.tmpl.html');\r\n        return builder.build();\r\n    }]);\r\n}());\r\n\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('gantt').factory('GanttCondensedGroups', ['ganttUtils', function(utils) {\r\n        var CondensedGroups = function (row, pluginScope) {\r\n            var self = this;\r\n\r\n            self.row = row;\r\n            self.pluginScope = pluginScope;\r\n            self.groups = [];\r\n            self.showGrouping = false;\r\n\r\n            var lifecycleGroups = self.row.model.condensedGroups;\r\n            if (lifecycleGroups.length > 0) {\r\n                self.showGrouping = true;\r\n                angular.forEach(lifecycleGroups, function(lifecycleGroup) {\r\n                    var left = row.rowsManager.gantt.getPositionByDate(lifecycleGroup.from);\r\n                    var width = row.rowsManager.gantt.getPositionByDate(lifecycleGroup.to) - left;\r\n\r\n                    self.groups.push({\r\n                      left: left,\r\n                      width: width,\r\n                      name: lifecycleGroup.name,\r\n                      inProgress: lifecycleGroup.in_progress,\r\n                      parentName: row.model.name\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        return CondensedGroups;\r\n    }]);\r\n}());\r\n\r\nangular.module('gantt.condensedgroups.templates', []).run(['$templateCache', function($templateCache) {\r\n    $templateCache.put('plugins/groups/condensedTaskGroup.tmpl.html',\r\n        '<div ng-controller=\"GanttCondensedGroupController\">\\n' +\r\n        '    <div class=\"gantt-task-group\"\\n' +\r\n        '         ng-class=\"\\'gantt-lifecycle-\\' + taskGroup.name.substr(0,1)\"\\n' +\r\n        '         ng-attr-title=\"{{taskGroup.name}}\"\\n' +\r\n        '         ng-style=\"{\\'left\\': taskGroup.left + \\'px\\', \\'width\\': taskGroup.width + \\'px\\'}\"\\n' +\r\n        '         ng-repeat=\"taskGroup in taskGroups\">\\n' +\r\n        '        <div ng-if=\"isActive(row.model.condensedGroups[$index])\" ng-style=\"{ \\'left\\': gantt.currentDateManager.position - taskGroup.left - 6 + \\'px\\' }\" ng-attr-title=\"{{currentDateTooltipText}}\" class=\"gantt-task-group-current-date\"></div>' +\r\n        '        <div class=\"gantt-task-group-left-main\"></div>\\n' +\r\n        '        <div class=\"gantt-task-group-right-main\"></div>\\n' +\r\n        '        <div class=\"gantt-task-group-left-symbol\"></div>\\n' +\r\n        '        <div class=\"gantt-task-group-right-symbol\"></div>\\n' +\r\n        '    </div>\\n' +\r\n        '</div>\\n' +\r\n        '\\n' +\r\n        '');\r\n}]);\r\n\r\n//# sourceMappingURL=angular-gantt-condensedgroups-plugin.js.map\r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc overview\r\n * @name ng-gantt\r\n * @description\r\n * # ng-gantt\r\n *\r\n * Main module of the application.\r\n */\r\n\r\nangular.module('ng-gantt', [\r\n    'restangular',\r\n    'ui.router',\r\n    'gantt',\r\n    'gantt.tree',\r\n    'gantt.tooltips',\r\n    'gantt.groups',\r\n    'gantt.progress',\r\n    'gantt.dependencies',\r\n    'gantt.condensedgroups'\r\n])\r\n\r\n.constant('RedmineBaseUrl', 'http://redmine.assist01.gbart.h3.hu')\r\n\r\n// Configurations\r\n.config(function ($stateProvider, RestangularProvider, RedmineBaseUrl) {\r\n\r\n  // States\r\n  $stateProvider\r\n    .state('login', {\r\n      url: \"/login\",\r\n      templateUrl: 'views/login.html',\r\n      controller: 'LoginCtrl'\r\n    })\r\n\r\n    .state('projects', {\r\n      url: \"/projects\",\r\n      templateUrl: 'views/projects.html',\r\n      controller: 'ProjectsCtrl'\r\n    })\r\n\r\n    .state('projectgantt', {\r\n      url: \"/project/:projectId/gantt\",\r\n      templateUrl: 'views/project-gantt.html',\r\n      controller: 'ProjectGanttCtrl'\r\n      /*\r\n      resolve: {\r\n        apiKey: function($window) {\r\n          var apiKey = $window.sessionStorage.getItem('apiKey')\r\n          if (apiKey === null) {\r\n            apiKey = $window.prompt('redmine api key please');\r\n            $window.sessionStorage.setItem('apiKey', apiKey);\r\n          }\r\n          return apiKey;\r\n        }\r\n      }*/\r\n    })\r\n\r\n    .state('condensedgantt', {\r\n      url: \"/project/:projectId/condensedgantt\",\r\n      templateUrl: 'views/condensed-gantt.html',\r\n      controller: 'CondensedGanttCtrl',\r\n      resolve: {\r\n        projectIds: function($stateParams) {\r\n          return [parseInt($stateParams.projectId)];\r\n        }\r\n      }\r\n    })\r\n\r\n    .state('demo', {\r\n      url: \"/\",\r\n      templateUrl: 'views/condensed-gantt.html',\r\n      controller: 'CondensedGanttCtrl',\r\n      resolve: {\r\n        projectIds: function() {\r\n          return [ 203, 442, 489 ];\r\n        }\r\n      }\r\n    });\r\n\r\n  RestangularProvider.setBaseUrl(RedmineBaseUrl);\r\n  RestangularProvider.setRequestSuffix('.json');\r\n  RestangularProvider.addResponseInterceptor(function(data, operation, what, url, response, deferred) {\r\n    var extractedData;\r\n    // .. to look for getList operations\r\n    if (operation === \"getList\") {\r\n      // .. and handle the data and meta data\r\n      extractedData = data[what];\r\n      extractedData.meta = {totalcount: data.totalcount, offset: data.offset, limit: data.limit};\r\n    } else {\r\n      extractedData = data.data;\r\n    }\r\n    return extractedData;\r\n  });\r\n})\r\n.constant('_', window._)\r\n.run(function(User, Restangular, $state, $templateCache) {\r\n\r\n  angular.module('ui.tree').config(function(treeConfig) {\r\n    treeConfig.defaultCollapsed = true;\r\n  });\r\n\r\n  // TODO: remove hack, need to override template\r\n  /*\r\n  $templateCache.put('plugins/tree/treeBodyChildrenOriginal.tmpl.html',\r\n    '<div ng-controller=\"GanttTreeNodeController\"\\n' +\r\n    '     class=\"gantt-row-label gantt-row-height\"\\n' +\r\n    '     ng-class=\"row.model.classes\"\\n' +\r\n    '     ng-style=\"{\\'height\\': row.model.height}\">\\n' +\r\n    '  <div class=\"gantt-valign-container\">\\n' +\r\n    '    <div class=\"gantt-valign-content\">\\n' +\r\n    '      <a ng-disabled=\"isCollapseDisabled()\" data-nodrag\\n' +\r\n    '         class=\"gantt-tree-handle-button btn btn-xs\"\\n' +\r\n    '         ng-class=\"{\\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"\\n' +\r\n    '         ng-click=\"!isCollapseDisabled() && toggle()\"><span\\n' +\r\n    '         class=\"gantt-tree-handle glyphicon glyphicon-chevron-down\"\\n' +\r\n    '         ng-class=\"{\\n' +\r\n    '         \\'glyphicon-chevron-right\\': collapsed, \\'glyphicon-chevron-down\\': !collapsed,\\n' +\r\n    '         \\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"></span>\\n' +\r\n    '      </a>\\n' +\r\n    '      <span gantt-row-label class=\"gantt-label-text\" gantt-bind-compile-html=\"getRowContent()\"/>\\n' +\r\n    '    </div>\\n' +\r\n    '  </div>\\n' +\r\n    '</div>\\n' +\r\n    '<ol ui-tree-nodes ng-class=\"{hidden: collapsed}\" ng-model=\"childrenRows\">\\n' +\r\n    '  <li ng-repeat=\"row in childrenRows\" ui-tree-node>\\n' +\r\n    '    <div ng-include=\"\\'plugins/tree/treeBodyChildrenOriginal.tmpl.html\\'\"></div>\\n' +\r\n    '  </li>\\n' +\r\n    '</ol>');*/\r\n\r\n  $templateCache.put('plugins/tree/treeBodyChildren.tmpl.html',\r\n    '<div ng-controller=\"GanttTreeNodeController\"\\n' +\r\n    '     class=\"gantt-row-label gantt-row-height\"\\n' +\r\n    '     ng-class=\"row.model.classes\"\\n' +\r\n    '     ng-style=\"{\\'height\\': row.model.height}\">\\n' +\r\n    '<div class=\"gantt-valign-container\">\\n' +\r\n    '<div class=\"gantt-valign-content\">\\n' +\r\n    '<a ng-disabled=\"isCollapseDisabledOnNode()\" ng-controller=\"GanttTreeNodeToggleController\" data-nodrag\\n' +\r\n    '   class=\"gantt-tree-handle-button btn btn-xs\"\\n' +\r\n    '   ng-class=\"{\\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"\\n' +\r\n    '   ng-click=\"toggleNode()\"><span\\n' +\r\n    '   class=\"gantt-tree-handle glyphicon\"\\n' +\r\n    '   ng-class=\"{\\n' +\r\n    '   \\'glyphicon-chevron-right\\': collapsed, \\'glyphicon-chevron-down\\': !collapsed,\\n' +\r\n    '   \\'gantt-tree-collapsed\\': collapsed, \\'gantt-tree-expanded\\': !collapsed}\"></span>\\n' +\r\n    '</a>\\n' +\r\n    '<span gantt-row-label class=\"gantt-label-text\" gantt-bind-compile-html=\"getRowContent()\"/>\\n' +\r\n    '</div>\\n' +\r\n    '</div>\\n' +\r\n    '</div>\\n' +\r\n    '<ol ui-tree-nodes ng-class=\"{hidden: collapsed}\" ng-model=\"childrenRows\">\\n' +\r\n    '  <li ng-repeat=\"row in childrenRows\" ui-tree-node collapsed=\"true\">\\n' +\r\n    '    <div ng-include=\"\\'plugins/tree/treeBodyChildren.tmpl.html\\'\"></div>\\n' +\r\n    '  </li>\\n' +\r\n    '</ol>');\r\n\r\n  if (User.getUser()) {\r\n    Restangular.setDefaultRequestParams({ key: User.apiKey() });\r\n    $state.go('demo');\r\n  } else\r\n    $state.go('login');\r\n});\r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name ng-gantt.controller:CondensedGanttCtrl\r\n * @description\r\n * # CondensedGanttCtrl\r\n * Controller of the condensed gantt\r\n */\r\nangular.module('ng-gantt')\r\n  .controller('CondensedGanttCtrl', function ($scope, Restangular, RedmineBaseUrl, $compile, moment, _, PrepareIssues, $timeout, $window, projectIds, $q) {\r\n\r\n    function projectId(rowId) {\r\n      return \"project_\" + rowId;\r\n    }\r\n\r\n    var destroyOpenProjectListener = $scope.$on('openProject', function(e, projectRowScope) {\r\n      var rowId = projectRowScope.row.model.id;\r\n      var projectId = projectRowScope.row.model.projectId;\r\n      var projectParent = projectRowScope.row.model.parent;\r\n      Restangular.all('issues').getList({ project_id: projectId, limit: 100, include: 'relations', status_id: '*' }).then(\r\n        function(issues) {\r\n          $scope.$broadcast('projectOpened', projectId);\r\n\r\n          var newRows = PrepareIssues(issues, rowId, projectId);\r\n          var filteredRows = _.filter($scope.data, function(ganttRow) {\r\n            // never get rid of the 'project rows'\r\n            if (ganttRow.isProject) return true;\r\n\r\n            // keep the rows under the opened project\r\n            //console.log('keeping row: ', ganttRow.projectId == projectId);\r\n            return ganttRow.projectId == projectId;\r\n          });\r\n\r\n          $scope.data = filteredRows.concat(newRows);\r\n          $scope.openedProject = projectId;\r\n\r\n          console.log(\"(open) now toggle\", projectId);\r\n          projectRowScope.toggle();\r\n\r\n          $timeout(function() {\r\n            $scope.api.side.setWidth(undefined);\r\n          }, 0);\r\n        });\r\n    });\r\n\r\n    var destroyCloseProjectListener = $scope.$on('closeProject', function (e, projectRowScope) {\r\n      var projectId = projectRowScope.row.model.projectId;\r\n      $scope.data = _.filter($scope.data, function(ganttRow) {\r\n        if (ganttRow.isProject) return true;\r\n\r\n        return ganttRow.projectId != projectId;\r\n      });\r\n\r\n      console.log(\"(close) now toggle\", projectId);\r\n      projectRowScope.toggle();\r\n    });\r\n\r\n    $scope.$on('destroy', function() {\r\n      destroyOpenProjectListener();\r\n      destroyCloseProjectListener();\r\n    });\r\n\r\n    $scope.filter = {\r\n      row: \"\",\r\n      category: \"\"\r\n    };\r\n\r\n    $scope.filterRow = function ($event) {\r\n      if ($event.which === 13) {\r\n        applyFilters();\r\n      }\r\n    };\r\n\r\n    $scope.filterCategory = function() { applyFilters(); };\r\n\r\n    var applyFilters = function() {\r\n      $scope.api.rows.refresh();\r\n      $scope.toggleMenu();\r\n    };\r\n\r\n    /*\r\n    var filterRowsFunc = function (rows) {\r\n      return _.filter(rows, function(row) { return $scope.filterRowFunc(row) });\r\n    };*/\r\n\r\n    $scope.filterRowFunc = function (row) {\r\n      var rowValue = $scope.filter.row;\r\n      var categoryValue = $scope.filter.category;\r\n      var rowVisibleByRowFilter = true;\r\n      var rowVisibleByCategoryFilter = true;\r\n\r\n      if (rowValue !== undefined && rowValue != '') {\r\n        rowVisibleByRowFilter = row.model.name.indexOf(rowValue) > -1;\r\n      }\r\n\r\n      if (categoryValue !== undefined && categoryValue != '') {\r\n        if (row.model.condensedGroups === undefined) {\r\n          console.log('hiding row', row.model.name, row.model.projectId);\r\n          rowVisibleByCategoryFilter = false;\r\n        } else {\r\n          rowVisibleByCategoryFilter =\r\n            _.chain(row.model.condensedGroups)\r\n              .map(function (group) {\r\n                return group.name.substr(0, 1) == categoryValue && $scope.isActiveLifecycleCategory(group)\r\n              })\r\n              //.tap(function(a) { console.log(a)})\r\n              .any()\r\n              .value();\r\n        }\r\n      }\r\n\r\n      //console.log('row: ', rowVisibleByRowFilter, ', category: ', rowVisibleByCategoryFilter);\r\n      return rowVisibleByRowFilter && rowVisibleByCategoryFilter;\r\n    };\r\n\r\n    // TODO: remove duplicated logic (see condensedgroups plugin)\r\n    $scope.isActiveLifecycleCategory = function(lifecycleCategory) {\r\n      return lifecycleCategory.from <= $scope.api.gantt.currentDateManager.date &&\r\n        $scope.api.gantt.currentDateManager.date < lifecycleCategory.to;\r\n    };\r\n\r\n    $scope.showMenu = false;\r\n    $scope.toggleMenu = function() { $scope.showMenu = !$scope.showMenu };\r\n\r\n    // TODO: causes flicker when opening a project\r\n    $scope.maxHeight = function() {\r\n      return $window.innerHeight;\r\n    };\r\n\r\n    $scope.options = {\r\n      timeFrames: {\r\n        'day': {\r\n          start: moment('10:00', 'HH:mm'),\r\n          end: moment('18:00', 'HH:mm'),\r\n          working: true,\r\n          default: true\r\n        },\r\n        'weekend': {\r\n          working: false\r\n        }\r\n      },\r\n      dateFrames: {\r\n        'weekend': {\r\n          evaluator: function(date) {\r\n            return date.isoWeekday() === 6 || date.isoWeekday() === 7;\r\n          },\r\n          targets: ['weekend']\r\n        }\r\n      },\r\n      rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\r\n      taskContent : '<i class=\"fa fa-tasks\"></i> <a href=\"'+RedmineBaseUrl+'/issues/{{task.model.issueId}}\" target=\"_blank\">{{task.model.name}}</a>',\r\n      columnWidth: 18,\r\n      currentDate: 'line',\r\n      currentDateValue: new Date(moment().format(\"YYYY\"), moment().format(\"M\") -1, moment().format(\"D\"))\r\n      //currentDateValue: new Date(2015, 5, 12)//, 9, 0, 0)\r\n    };\r\n\r\n    $scope.registerApi = function(api) {\r\n      $scope.api = api;\r\n\r\n      api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\r\n\r\n        // TODO: same in project-gantt\r\n        // override the gantt-scrollable's css to have min-height set\r\n        if (dName === 'ganttScrollable') {\r\n          dScope.getScrollableCss = function() {\r\n            var css = {};\r\n\r\n            var maxHeight = dScope.gantt.options.value('maxHeight');\r\n            if (maxHeight > 0) {\r\n              css['max-height'] = maxHeight - dScope.gantt.header.getHeight() + 'px';\r\n              css['min-height'] = css['max-height'];\r\n              css['overflow-y'] = 'auto';\r\n\r\n              if (dScope.gantt.scroll.isVScrollbarVisible()) {\r\n                css['border-right'] = 'none';\r\n              }\r\n            }\r\n\r\n            var columnWidth = dScope.gantt.options.value('columnWidth');\r\n            var bodySmallerThanGantt = dScope.gantt.width === 0 ? false: dScope.gantt.width < dScope.gantt.getWidth() - dScope.gantt.side.getWidth();\r\n            if (columnWidth !== undefined && bodySmallerThanGantt) {\r\n              css.width = (dScope.gantt.width + dScope.gantt.scroll.getBordersWidth()) + 'px';\r\n            }\r\n\r\n            return css;\r\n          };\r\n        }\r\n      });\r\n\r\n      api.core.on.ready($scope, function(api) {\r\n\r\n        // scroll to the current date after the columns are displayed\r\n        api.columns.on.generate($scope, function() {\r\n          $timeout(function() {\r\n            $scope.api.scroll.toDate($scope.options.currentDateValue);\r\n            $scope.readyToShow = true;\r\n          }, 0);\r\n        });\r\n\r\n        api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\r\n          if (dName === 'ganttTaskContent') {\r\n            dElement.attr('inview', '');\r\n            $compile(dElement)(dScope);\r\n          }\r\n        });\r\n\r\n        var promises = [];\r\n        _.each(projectIds, function(projectId) {\r\n          var promise = Restangular.one('ganttprojects', projectId).getList();\r\n          promises.push(promise);\r\n        });\r\n\r\n        $q.all(promises).then(function(data) {\r\n          var allProjects = _.chain(data)\r\n                             .map(function(projectRestangular) { return projectRestangular.plain(); })\r\n                             .flatten()\r\n                             .filter(function(project) { return _.contains(projectIds, project.id) })\r\n                             .value();\r\n\r\n          projectsLoaded(allProjects);\r\n\r\n          // collapse this way or need to override another tree tmpl..\r\n          $timeout(function() {\r\n            $scope.api.tree.collapseAll();\r\n\r\n            $scope.api.side.setWidth(undefined);\r\n          }, 0);\r\n        });\r\n      });\r\n    };\r\n\r\n    function projectsLoaded(projects) {\r\n      var data = [];\r\n\r\n      _.each(projects, function(project) {\r\n        var condensedProjectRow = {\r\n          isProject: true,\r\n          projectId: project.id,\r\n          id: projectId(project.id),\r\n          name: project.name || \"project \" + project.projectId,\r\n          groups: false,\r\n          classes: ['gantt-row-lifecycle'],\r\n          parent: projectId(project.parent_id),\r\n          details: {\r\n            projectManager: project.project_manager || '-',\r\n            reportedStatus: project.reported_status,\r\n            issuesInProgress: project.in_progress_issues\r\n          }\r\n        };\r\n\r\n        if (_.isEmpty(project.lifecycle_categories)) {\r\n          var childProjects = _.where(projects, { 'parent_id': project.id });\r\n          var projectStartDate = _.min(childProjects, function(cp) { return new Date(cp.start_date) }).start_date;\r\n          var projectDueDate = _.max(childProjects, function(cp) { return new Date(cp.due_date) }).due_date;\r\n\r\n          // TODO\r\n          $scope.options.fromDate = projectStartDate;\r\n          $scope.options.toDate = projectDueDate;\r\n\r\n          condensedProjectRow.groups = { enabled: true, display: 'group', from: moment(projectStartDate), to: moment(projectDueDate) };\r\n        } else {\r\n          condensedProjectRow.condensedGroups = [];\r\n\r\n          _.each(_.sortBy(project.lifecycle_categories, function (x) {\r\n            return x.name\r\n          }), function (lifecycleCategory) {\r\n            var lifecycleGroup = {\r\n              from: moment(lifecycleCategory.start_date),\r\n              to: moment(lifecycleCategory.due_date),\r\n              name: lifecycleCategory.name,\r\n              in_progress: lifecycleCategory.in_progress\r\n            };\r\n\r\n            condensedProjectRow.condensedGroups.push(lifecycleGroup);\r\n          });\r\n        }\r\n        data.push(condensedProjectRow);\r\n      });\r\n\r\n      setGanttSpan(projects);\r\n\r\n      $scope.data = data;\r\n    }\r\n\r\n    function setGanttSpan(projects) {\r\n      var projectStartDate = _.min(projects, function(cp) { return new Date(cp.start_date) }).start_date;\r\n      var projectDueDate = _.max(projects, function(cp) { return new Date(cp.due_date) }).due_date;\r\n\r\n      $scope.options.fromDate = projectStartDate;\r\n      $scope.options.toDate = projectDueDate;\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('ng-gantt')\r\n  .controller('GanttTreeNodeToggleController', function($scope) {\r\n    $scope.toggleNode = function() {\r\n      if (isProjectRow()) {\r\n        toggleProject();\r\n      } else {\r\n        !$scope.isCollapseDisabled() && $scope.toggle();\r\n      }\r\n    };\r\n\r\n    $scope.isCollapseDisabledOnNode = function() {\r\n      if (isProjectRow()) {\r\n        return false;\r\n      } else {\r\n        return $scope.isCollapseDisabled();\r\n      }\r\n    };\r\n\r\n    $scope.$on(\"projectOpened\", function (e, projectId) {\r\n      if (!isProjectRow()) return;\r\n\r\n      console.log(\"projectOpened\", projectId)\r\n      if ($scope.row.model.id != projectId) {\r\n        $scope.closeProject();\r\n      }\r\n    });\r\n\r\n    $scope.openProject = function () {\r\n      if (!$scope.collapsed) return;\r\n\r\n      console.log('clicked project', $scope.row.model.id);\r\n      $scope.$emit('openProject', $scope);\r\n      var idx = $scope.row.model.classes.indexOf('gantt-row-expanded');\r\n      if (idx == -1) $scope.row.model.classes.push('gantt-row-expanded');\r\n    };\r\n\r\n    $scope.closeProject = function () {\r\n      if ($scope.collapsed) return;\r\n\r\n      if ($scope.row.model.parent) {\r\n        $scope.$emit('closeProject', $scope);\r\n      } else {\r\n        $scope.toggle();\r\n      }\r\n      var idx = $scope.row.model.classes.indexOf('gantt-row-expanded');\r\n      if (idx > -1) $scope.row.model.classes.splice(idx, 1);\r\n    };\r\n\r\n    var isProjectRow = function() {\r\n      return $scope.row.model.condensedGroups instanceof Array;\r\n    };\r\n\r\n    var toggleProject = function () {\r\n      $scope.collapsed ? $scope.openProject() : $scope.closeProject();\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('ng-gantt')\r\n  .controller('LoginCtrl', function ($scope, $window, $state, User, Restangular) {\r\n    $scope.login = function(credentials){\r\n        User.login(credentials)\r\n            .then(function(response){\r\n                var user = response.data.user;\r\n                User.setUser(user);\r\n                Restangular.setDefaultRequestParams({ key: user.api_key });\r\n                $state.go('projects');\r\n            }, function(){\r\n                $window.alert('Wrong username or password!');\r\n            });\r\n    };\r\n  });\r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name ng-gantt.controller:ProjectGanttCtrl\r\n * @description\r\n * # ProjectGanttCtrl\r\n * Controller of the project gantt\r\n */\r\nangular.module('ng-gantt')\r\n.controller('ProjectGanttCtrl', function ($scope, Restangular, $stateParams, RedmineBaseUrl, $compile, moment, _, PrepareIssues, $window, $timeout) {\r\n    $scope.registerApi = function(api) {\r\n        $scope.api = api;\r\n\r\n        api.core.on.ready($scope, function(api) {\r\n            console.log('ready');\r\n            api.directives.on.new($scope, function(dName, dScope, dElement, dAttrs, dController) {\r\n                if (dName === 'ganttTaskContent') {\r\n                    dElement.attr('inview', '');\r\n                    $compile(dElement)(dScope);\r\n                }\r\n            });\r\n\r\n            Restangular.all('issues').getList({ project_id: $stateParams.projectId, limit: 100, include: 'relations', status_id: '*' })\r\n                .then(function(issues) {\r\n\r\n                    // hacky solution; expand-to-fit attribute seems to have problems\r\n                    //expandGanttTimeSpan(issues);\r\n\r\n                    $scope.data = PrepareIssues(issues);\r\n                  console.log($scope.data)\r\n\r\n                    $timeout(function() {\r\n                        $scope.api.side.setWidth(undefined);\r\n                    }, 0);\r\n                });\r\n        });\r\n    };\r\n\r\n    var contextMenuOptions = [\r\n            ['Context item 1', function (a) {\r\n\r\n            }],\r\n            null,\r\n            ['Context item 2', function (a) {\r\n\r\n            }],\r\n            null,\r\n            ['More...', [\r\n                ['Sub item 1', function ($itemScope) {\r\n\r\n                }],\r\n                null,\r\n                ['Sub item 2', function ($itemScope) {\r\n\r\n                }]\r\n            ]]\r\n    ];\r\n\r\n    $scope.options = {\r\n        // if the whole project's span is less than about 4 months, expand it by setting the dates explicitly\r\n        //fromDate: new Date(2016,0,20),\r\n        //toDate: new Date(2016,4,20),\r\n        columnWidth: 18,\r\n        currentDate: 'line',\r\n        timeFrames: {\r\n            'day': {\r\n                start: moment('10:00', 'HH:mm'),\r\n                end: moment('18:00', 'HH:mm'),\r\n                working: true,\r\n                default: true\r\n            },\r\n            'weekend': {\r\n                working: false\r\n            }\r\n        },\r\n\r\n        dateFrames: {\r\n            'weekend': {\r\n                evaluator: function(date) {\r\n                    return date.isoWeekday() === 6 || date.isoWeekday() === 7;\r\n                },\r\n                targets: ['weekend']\r\n            }\r\n        },\r\n\r\n        //contextMenuOptions: contextMenuOptions,\r\n        rowContent: '<i class=\"fa fa-align-justify\"></i> {{row.model.name}}',\r\n        taskContent : '<i class=\"fa fa-tasks\"></i> <span ng-context-menu=\"contextMenuOptions\"><a href=\"'+RedmineBaseUrl+'/issues/{{task.model.issueId}}\" target=\"_blank\">{{task.model.name}}</a></span>',\r\n    };\r\n\r\n    $scope.maxHeight = function() {\r\n        return $window.innerHeight;\r\n    };\r\n\r\n    function expandGanttTimeSpan(issues) {\r\n        var start = moment(_.min(issues, function(issue) { return moment(issue.start_date) }).start_date);\r\n        var end = moment(_.max(issues, function(issue) { return moment(issue.due_date) }).due_date);\r\n\r\n        var durationDays = moment.duration(end.diff(start)).asDays();\r\n        if (durationDays < 130) {\r\n          $scope.options.fromDate = start.calendar();\r\n          $scope.options.toDate = start.add(130, 'days').calendar();\r\n        }\r\n    }\r\n});\r\n","'use strict';\r\n\r\nangular.module('ng-gantt')\r\n  .controller('ProjectsCtrl', function ($scope, Restangular, $state) {\r\n\t  var pageSize = 100;\r\n\t  var maxPage = 5;\r\n\t  $scope.projects = [{id: 484, name: 'Teszt projekt'}];\r\n\r\n\t  getProjectsPage(0);\r\n\r\n\t  $scope.showGantt = function(projectId) {\r\n\t\t  $state.go(\"projectgantt\", {projectId: projectId});\r\n\t  };\r\n\r\n    $scope.showCondensedGantt = function(projectId) {\r\n      $state.go(\"condensedgantt\", {projectId: projectId});\r\n    };\r\n\r\n\t  function getProjectsPage(page) {\r\n\t\tRestangular.all('projects').getList({limit: pageSize, offset: page * pageSize}).then(function(projects) {\r\n\t\t\tvar filteredProjects = _.where(projects, { parent: {name: \"8 Ways\"} });\r\n\t\t\t$scope.projects = $scope.projects.concat(_.map(filteredProjects, function(p) { return _.pick(p, 'id', 'name') }));\r\n\r\n\t\t\tif (++page < maxPage) getProjectsPage(page);\r\n\t\t});\r\n\t  }\r\n  });\r\n","'use strict';\r\n// borrowed from https://stackoverflow.com/questions/29764079/angularjs-creating-context-menu-with-submenu\r\nangular.module('ng-gantt')\r\n.directive('ngContextMenu', function ($parse) {\r\n    var buildMenuItem = function($scope, list, item) {\r\n        var $li = angular.element('<li>');\r\n        if (item === null) {\r\n            $li.addClass('divider');\r\n        } else if(item[1] instanceof Array) {\r\n            $li.addClass(\"dropdown-submenu\");\r\n            var $subMenu = angular.element('<ul class=\"dropdown-menu\">');\r\n            \r\n            item[1].forEach(function (subItem, x) {\r\n                buildMenuItem($scope, $subMenu, subItem);\r\n            });\r\n            \r\n            var $a = angular.element('<a>');\r\n            $a.text(item[0]);\r\n            $li.append($a);\r\n            $li.append($subMenu);\r\n        } else {\r\n            var $a = angular.element('<a>');\r\n            $a.attr({ tabindex: '-1', href: '#' });\r\n            $a.text(item[0]);\r\n            $li.append($a);\r\n            $li.on('click', function () {\r\n                $scope.$apply(function() {\r\n                    item[1].call($scope, $scope);\r\n                });\r\n            });\r\n        }\r\n        list.append($li);\r\n    };\r\n    \r\n    var renderContextMenu = function ($scope, event, options) {\r\n        angular.element(event.currentTarget).addClass('context');\r\n        var $contextMenu = angular.element('<div>');\r\n        $contextMenu.addClass('dropdown clearfix');\r\n        var $ul = angular.element('<ul>');\r\n        $ul.addClass('dropdown-menu');\r\n        $ul.attr({ 'role': 'menu' });\r\n        $ul.css({\r\n            display: 'block',\r\n            position: 'absolute',\r\n            left: event.pageX + 'px',\r\n            top: event.pageY + 'px'\r\n        });\r\n        angular.forEach(options, function (item, i) {\r\n            buildMenuItem($scope, $ul, item);\r\n        });\r\n        $contextMenu.append($ul);\r\n        $contextMenu.css({\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            zIndex: 9999\r\n        });\r\n        angular.element(document).find('body').append($contextMenu);\r\n        $contextMenu.on(\"click\", function (e) {\r\n            angular.element(event.currentTarget).removeClass('context');\r\n            $contextMenu.remove();\r\n        }).on('contextmenu', function (event) {\r\n            angular.element(event.currentTarget).removeClass('context');\r\n            event.preventDefault();\r\n            $contextMenu.remove();\r\n        });\r\n    };\r\n    return function ($scope, element, attrs) {\r\n        element.on('contextmenu', function (event) {\r\n            $scope.$apply(function () {\r\n                event.preventDefault();\r\n                var options = $scope.$eval(attrs.ngContextMenu);\r\n                if (options instanceof Array) {\r\n                    renderContextMenu($scope, event, options);\r\n                } else {\r\n                    throw '\"' + attrs.ngContextMenu + '\" not an array';                    \r\n                }\r\n            });\r\n        });\r\n    };\r\n});\r\n","'use strict';\r\n\r\nangular.module('ng-gantt')\r\n.directive('inview', function () {\r\n    var getGanttBodyRight = function() {\r\n        return document.querySelector('.gantt-body').getClientRects()[0].right;\r\n    };\r\n\r\n    return {\r\n        link: function(scope, element) {\r\n            scope.$watch(\r\n                function() {\r\n                    var clientRects = element[0].getClientRects();\r\n                    if (clientRects.length == 0) return true;\r\n                    return clientRects[0].right <= getGanttBodyRight();\r\n                },\r\n                function(newInviewStatus, oldInviewStatus) {\r\n                    if (! newInviewStatus) {\r\n                        element[0].style.right = '100%';\r\n                        element[0].style.left = 'auto';\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n});\r\n","'use strict';\r\n\r\nangular.module('ng-gantt')\r\n  .factory('PrepareIssues', function() {\r\n    return function (issues, root, rootId) {\r\n      /* debug\r\n       console.log(issues);\r\n       _.each(issues, function (issue) {\r\n       var parentId = issue.parent ? issue.parent.id : null;\r\n       var lifecycleCategory = _.findWhere(issue.custom_fields, {name: 'Lifecycle category'}).value;\r\n\r\n       if (/^A/.test(lifecycleCategory))\r\n       console.log(issue.custom_fields[4], issue);\r\n       //console.log(issue.id, issue.subject, parentId, lifecycleCategory);\r\n       });*/\r\n\r\n      var data = [];\r\n      var issuesDependencies = getIssuesDependencies(issues);\r\n      var issuesByLifecycle = getIssuesByLifecycle(issues);\r\n\r\n      _.each(_.keys(issuesByLifecycle).sort(), function (lifecycle) {\r\n        var lifecycleRow = { id: lifecycleId(lifecycle, root), name: lifecycle, groups: true, classes: 'gantt-row-lifecycle', projectId: rootId };\r\n        if (root) lifecycleRow.parent = root;\r\n\r\n        var sortedLifecycleChildIssues =\r\n          _.chain(issuesByLifecycle[lifecycle])\r\n          .sortBy(function (issue) {\r\n            return getCustomFieldValue(issue, 'Position');\r\n          })\r\n          .sortBy(function(issue) {\r\n            return moment(issue.start_date);\r\n          }).value();\r\n\r\n        _.each(sortedLifecycleChildIssues, function (issue) {\r\n          var parent = issue.parent ? rowId(_.findWhere(issues, {id: issue.parent.id}).id) : lifecycleId(lifecycle, root);\r\n\r\n          var assigneeRole = getCustomFieldValue(issue, 'Assignee role');\r\n\r\n          var dependencies = getTaskDependencyParameters(issue, issuesDependencies);\r\n\r\n          var row =\r\n          {\r\n            id: rowId(issue.id),\r\n            name: issue.subject,\r\n            parent: parent,\r\n            projectId: rootId,\r\n            tasks: [\r\n              {\r\n                issueId : issue.id,\r\n                id: taskId(issue.id),\r\n                name: issue.subject,\r\n                from: issue.start_date,\r\n                to: issue.due_date || issue.start_date,\r\n                type: issue.tracker.name,\r\n                status: issue.status.name,\r\n                priority: issue.priority.name,\r\n                assignee: { role: assigneeRole, fullname: (issue.assigned_to && issue.assigned_to.name) || '-' },\r\n                progress: { percent: issue.done_ratio, classes: ['ng-gantt-progress'] },\r\n                classes: getAssigneeClass(assigneeRole),\r\n                dependencies: dependencies\r\n              }\r\n            ]\r\n          };\r\n\r\n          // don't show the group if its a sub-task\r\n          if (issue.parent) row.groups = false;\r\n          data.push(row);\r\n        });\r\n        data.push(lifecycleRow);\r\n      });\r\n\r\n      return data;\r\n    };\r\n\r\n    function lifecycleId(lifecycle, root) {\r\n      return (root || 'root') + '_lifecycle_' + lifecycle;\r\n    }\r\n\r\n    function rowId(issueId) {\r\n      return 'row_' + issueId;\r\n    }\r\n\r\n    function taskId(issueId) {\r\n      return 'task_' + issueId;\r\n    }\r\n\r\n    function getTaskDependencyParameters(issue, issuesDependencies) {\r\n      var issueDependencies = _.findWhere(issuesDependencies, {id: issue.id});\r\n      if (issueDependencies === undefined) return [];\r\n\r\n      return _.map(issueDependencies.dependencies, function(dependencyId) {\r\n        return { from: taskId(dependencyId) };\r\n      });\r\n    }\r\n\r\n    function getIssuesDependencies(issues) {\r\n      var issuesDependencies = [];\r\n\r\n      _.each(issues, function (issue) {\r\n        if (issue.relations.length == 0) return;\r\n\r\n        _.where(issue.relations, { relation_type: 'precedes' })\r\n          .forEach(function(precedesRelation) {\r\n            var issueDependencies;\r\n            if (issueDependencies = _.findWhere(issuesDependencies, { id: precedesRelation.issue_to_id })) {\r\n              if (! _.contains(issueDependencies.dependencies, precedesRelation.issue_id))\r\n                issueDependencies.dependencies.push(precedesRelation.issue_id);\r\n            } else\r\n              issuesDependencies.push({ id: precedesRelation.issue_to_id, dependencies: [ precedesRelation.issue_id ] });\r\n          });\r\n      });\r\n\r\n      return issuesDependencies;\r\n    }\r\n\r\n    function getIssuesByLifecycle(issues) {\r\n      return _.groupBy(issues, function (issue) {\r\n        return getCustomFieldValue(issue, 'Lifecycle category', '');\r\n      });\r\n    }\r\n\r\n    function getCustomFieldValue(issue, name, defaultValue) {\r\n      var customFieldByName = _.findWhere(issue.custom_fields, {name: name});\r\n      if (customFieldByName === undefined) return defaultValue;\r\n\r\n      return customFieldByName.value;\r\n    }\r\n\r\n    function getAssigneeClass(assignee) {\r\n      switch (assignee) {\r\n        case 'Sales': return \"sales-task\";\r\n        case 'Team': return \"team-task\";\r\n        case 'PM': return \"pm-task\";\r\n        case 'Client': return \"client-task\";\r\n        case '':\r\n        case undefined: return '';\r\n        default: throw new Error('Unknown assignee ' + assignee);\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('ng-gantt')\r\n\t.factory('User', function(Restangular, $http, RedmineBaseUrl) {\r\n\t\tvar getHeaders = function(credentials) {\r\n\t\t\treturn {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': 'Basic '+btoa(credentials.username+':'+credentials.password)\r\n\t\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\tlogin: function(credentials) {\r\n\t\t\t\t/*return Restangular.one('users').customGET('current', {}, getHeaders(credentials)).then(function(resp) {\r\n\t\t\t\t\tconsole.log('response', resp);\r\n\t\t\t\t});*/\r\n\t\t\t\treturn $http.get(RedmineBaseUrl + '/users/current.json', { 'headers': getHeaders(credentials) });\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tsetUser: function(user){\r\n                localStorage.user = JSON.stringify(user);\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tgetUser: function(){\r\n                try {\r\n\t\t\t\t    return localStorage.user ? JSON.parse(localStorage.user) : null;\r\n                } catch(e) {\r\n                    return null;\r\n                }\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tapiKey: function(){\r\n\t\t\t\treturn this.getUser() ? this.getUser().api_key : null;\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tisLoggedIn: function(){\r\n\t\t\t\treturn null !== this.getUser();\r\n\t\t\t},\r\n\t\t\t \r\n\t\t\tlogOut: function(){\r\n\t\t\t\tlocalStorage.user = '';\r\n\t\t\t}\r\n\t\t}\r\n\t});","(function(){\r\n    'use strict';\r\n\r\n    angular.module('gantt').factory('GanttTaskGroup', ['ganttUtils', 'GanttTask', function(utils, Task) {\r\n        var TaskGroup = function (row, pluginScope) {\r\n            var self = this;\r\n\r\n            self.row = row;\r\n            self.pluginScope = pluginScope;\r\n\r\n            self.descendants = self.pluginScope.hierarchy.descendants(self.row);\r\n\r\n            self.tasks = [];\r\n            self.overviewTasks = [];\r\n            self.promotedTasks = [];\r\n            self.showGrouping = false;\r\n\r\n            var groupRowGroups = self.row.model.groups;\r\n            if (typeof(groupRowGroups) === 'boolean') {\r\n                groupRowGroups = {enabled: groupRowGroups};\r\n            }\r\n\r\n            var getTaskDisplay = function(task) {\r\n                var taskGroups = task.model.groups;\r\n                if (typeof(taskGroups) === 'boolean') {\r\n                    taskGroups = {enabled: taskGroups};\r\n                }\r\n\r\n                var rowGroups = task.row.model.groups;\r\n                if (typeof(rowGroups) === 'boolean') {\r\n                    rowGroups = {enabled: rowGroups};\r\n                }\r\n\r\n                var enabledValue = utils.firstProperty([taskGroups, rowGroups, groupRowGroups], 'enabled', self.pluginScope.enabled);\r\n\r\n                if (enabledValue) {\r\n                    var display = utils.firstProperty([taskGroups, rowGroups, groupRowGroups], 'display', self.pluginScope.display);\r\n                    return display;\r\n                }\r\n            };\r\n\r\n            angular.forEach(self.descendants, function(descendant) {\r\n                angular.forEach(descendant.tasks, function(task) {\r\n                    var taskDisplay = getTaskDisplay(task);\r\n                    if (taskDisplay !== undefined) {\r\n                        self.tasks.push(task);\r\n                        var clone = new Task(self.row, task.model);\r\n\r\n                        if (taskDisplay === 'overview') {\r\n                            self.overviewTasks.push(clone);\r\n                        } else if(taskDisplay === 'promote'){\r\n                            self.promotedTasks.push(clone);\r\n                        } else {\r\n                            self.showGrouping = true;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            self.from = undefined;\r\n            if (groupRowGroups) {\r\n                self.from = groupRowGroups.from;\r\n            }\r\n            if (self.from === undefined) {\r\n                angular.forEach(self.tasks, function (task) {\r\n                    if (self.from === undefined || task.model.from < self.from) {\r\n                        self.from = task.model.from;\r\n                    }\r\n                });\r\n            }\r\n\r\n            self.to = undefined;\r\n            if (groupRowGroups) {\r\n                self.to = groupRowGroups.to;\r\n            }\r\n            if (self.to === undefined) {\r\n                angular.forEach(self.tasks, function (task) {\r\n                    if (self.to === undefined || task.model.to > self.to) {\r\n                        self.to = task.model.to;\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (self.from && self.to) self.showGrouping = true;\r\n\r\n            if (self.showGrouping) {\r\n                self.left = row.rowsManager.gantt.getPositionByDate(self.from);\r\n                self.width = row.rowsManager.gantt.getPositionByDate(self.to) - self.left;\r\n            }\r\n        };\r\n        return TaskGroup;\r\n    }]);\r\n}());\r\n"]}